#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef VISIONCCIOSSDK_SWIFT_H
#define VISIONCCIOSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import Photos;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VisionCCiOSSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// 自定义解码
SWIFT_CLASS("_TtC14VisionCCiOSSDK10AnyCodable")
@interface AnyCodable : NSObject
@property (nonatomic) id _Nonnull value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSString;
@class NSBundle;
@class NSCoder;

/// 会话基类
SWIFT_CLASS("_TtC14VisionCCiOSSDK10BaseChatVC")
@interface BaseChatVC : UIViewController
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)updateViewConstraints;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIScrollView;

@interface BaseChatVC (SWIFT_EXTENSION(VisionCCiOSSDK)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end

@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface BaseChatVC (SWIFT_EXTENSION(VisionCCiOSSDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end

@class UIDocumentInteractionController;

@interface BaseChatVC (SWIFT_EXTENSION(VisionCCiOSSDK)) <UIDocumentInteractionControllerDelegate>
- (void)documentInteractionController:(UIDocumentInteractionController * _Nonnull)controller willBeginSendingToApplication:(NSString * _Nullable)application;
- (void)documentInteractionController:(UIDocumentInteractionController * _Nonnull)controller didEndSendingToApplication:(NSString * _Nullable)application;
- (void)documentInteractionControllerDidDismissOpenInMenu:(UIDocumentInteractionController * _Nonnull)controller;
- (UIViewController * _Nonnull)documentInteractionControllerViewControllerForPreview:(UIDocumentInteractionController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
@end










/// 会话ViewController
SWIFT_CLASS("_TtC14VisionCCiOSSDK7CCKFApi")
@interface CCKFApi : BaseChatVC
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
/// 状态栏
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewWillDisappear:(BOOL)animated;
- (void)updateViewConstraints;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end








/// <code>IQAutoToolbarBySubviews</code>
/// Creates Toolbar according to subview’s hirarchy of Textfield’s in view.
/// <code>IQAutoToolbarByTag</code>
/// Creates Toolbar according to tag property of TextField’s.
/// <code>IQAutoToolbarByPosition</code>
/// Creates Toolbar according to the y,x position of textField in it’s superview coordinate.
typedef SWIFT_ENUM(NSInteger, IQAutoToolbarManageBehaviour, open) {
  IQAutoToolbarManageBehaviourBySubviews = 0,
  IQAutoToolbarManageBehaviourByTag = 1,
  IQAutoToolbarManageBehaviourByPosition = 2,
};

@class UIColor;
@class IQInvocation;

SWIFT_CLASS("_TtC14VisionCCiOSSDK15IQBarButtonItem") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQBarButtonItem : UIBarButtonItem
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// Additional target & action to do get callback action. Note that setting custom target & selector doesn’t affect native functionality, this is just an additional target to get a callback.
/// @param target Target object.
/// @param action Target Selector.
- (void)setTarget:(id _Nullable)target action:(SEL _Nullable)action;
/// Customized Invocation to be called when button is pressed. invocation is internally created using setTarget:action: method.
@property (nonatomic, strong) IQInvocation * _Nullable invocation;
@end

@class UIImage;

/// IQBarButtonItemConfiguration for creating toolbar with bar button items
SWIFT_CLASS("_TtC14VisionCCiOSSDK28IQBarButtonItemConfiguration") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQBarButtonItemConfiguration : NSObject
- (nonnull instancetype)initWithBarButtonSystemItem:(UIBarButtonSystemItem)barButtonSystemItem action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly) SEL _Nullable action;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>IQEnableModeDefault</code>
/// Pick default settings.
/// <code>IQEnableModeEnabled</code>
/// setting is enabled.
/// <code>IQEnableModeDisabled</code>
/// setting is disabled.
typedef SWIFT_ENUM(NSInteger, IQEnableMode, open) {
  IQEnableModeDefault = 0,
  IQEnableModeEnabled = 1,
  IQEnableModeDisabled = 2,
};


SWIFT_CLASS("_TtC14VisionCCiOSSDK12IQInvocation") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQInvocation : NSObject
@property (nonatomic, weak) id _Nullable target;
@property (nonatomic) SEL _Nonnull action;
- (nonnull instancetype)init:(id _Nonnull)target :(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (void)invokeFrom:(id _Nonnull)from;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum IQPreviousNextDisplayMode : NSInteger;
@class UIFont;
@class UITapGestureRecognizer;
@class UIView;

/// Codeless drop-in universal library allows to prevent issues of keyboard sliding up and cover UITextField/UITextView. Neither need to write any code nor any setup required and much more. A generic version of KeyboardManagement. https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html
SWIFT_CLASS("_TtC14VisionCCiOSSDK17IQKeyboardManager") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager : NSObject
/// Returns the default singleton instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IQKeyboardManager * _Nonnull shared;)
+ (IQKeyboardManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Enable/disable managing distance between keyboard and textField. Default is YES(Enabled when class loads in <code>+(void)load</code> method).
@property (nonatomic) BOOL enable;
/// To set keyboard distance from textField. can’t be less than zero. Default is 10.0.
@property (nonatomic) CGFloat keyboardDistanceFromTextField;
/// Automatic add the IQToolbar functionality. Default is YES.
@property (nonatomic) BOOL enableAutoToolbar;
/// /**
/// IQAutoToolbarBySubviews:   Creates Toolbar according to subview’s hirarchy of Textfield’s in view.
/// IQAutoToolbarByTag:        Creates Toolbar according to tag property of TextField’s.
/// IQAutoToolbarByPosition:   Creates Toolbar according to the y,x position of textField in it’s superview coordinate.
/// Default is IQAutoToolbarBySubviews.
/// */
/// AutoToolbar managing behaviour. Default is IQAutoToolbarBySubviews.
@property (nonatomic) enum IQAutoToolbarManageBehaviour toolbarManageBehaviour;
/// If YES, then uses textField’s tintColor property for IQToolbar, otherwise tint color is default. Default is NO.
@property (nonatomic) BOOL shouldToolbarUsesTextFieldTintColor;
/// This is used for toolbar.tintColor when textfield.keyboardAppearance is UIKeyboardAppearanceDefault. If shouldToolbarUsesTextFieldTintColor is YES then this property is ignored. Default is nil and uses black color.
@property (nonatomic, strong) UIColor * _Nullable toolbarTintColor;
/// This is used for toolbar.barTintColor. Default is nil.
@property (nonatomic, strong) UIColor * _Nullable toolbarBarTintColor;
/// IQPreviousNextDisplayModeDefault:      Show NextPrevious when there are more than 1 textField otherwise hide.
/// IQPreviousNextDisplayModeAlwaysHide:   Do not show NextPrevious buttons in any case.
/// IQPreviousNextDisplayModeAlwaysShow:   Always show nextPrevious buttons, if there are more than 1 textField then both buttons will be visible but will be shown as disabled.
@property (nonatomic) enum IQPreviousNextDisplayMode previousNextDisplayMode;
/// Toolbar previous/next/done button icon, If nothing is provided then check toolbarDoneBarButtonItemText to draw done button.
@property (nonatomic, strong) UIImage * _Nullable toolbarPreviousBarButtonItemImage;
@property (nonatomic, strong) UIImage * _Nullable toolbarNextBarButtonItemImage;
@property (nonatomic, strong) UIImage * _Nullable toolbarDoneBarButtonItemImage;
/// Toolbar previous/next/done button text, If nothing is provided then system default ‘UIBarButtonSystemItemDone’ will be used.
@property (nonatomic, copy) NSString * _Nullable toolbarPreviousBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarPreviousBarButtonItemAccessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable toolbarNextBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarNextBarButtonItemAccessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable toolbarDoneBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarDoneBarButtonItemAccessibilityLabel;
/// If YES, then it add the textField’s placeholder text on IQToolbar. Default is YES.
@property (nonatomic) BOOL shouldShowToolbarPlaceholder;
/// Placeholder Font. Default is nil.
@property (nonatomic, strong) UIFont * _Nullable placeholderFont;
/// Placeholder Color. Default is nil. Which means lightGray
@property (nonatomic, strong) UIColor * _Nullable placeholderColor;
/// Placeholder Button Color when it’s treated as button. Default is nil.
@property (nonatomic, strong) UIColor * _Nullable placeholderButtonColor;
/// Override the keyboardAppearance for all textField/textView. Default is NO.
@property (nonatomic) BOOL overrideKeyboardAppearance;
/// If overrideKeyboardAppearance is YES, then all the textField keyboardAppearance is set using this property.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// Resigns Keyboard on touching outside of UITextField/View. Default is NO.
@property (nonatomic) BOOL shouldResignOnTouchOutside;
/// TapGesture to resign keyboard on view’s touch. It’s a readonly property and exposed only for adding/removing dependencies if your added gesture does have collision with this one
@property (nonatomic, strong) UITapGestureRecognizer * _Nonnull resignFirstResponderGesture;
/// Resigns currently first responder field.
- (BOOL)resignFirstResponder;
/// If YES, then it plays inputClick sound on next/previous/done click.
@property (nonatomic) BOOL shouldPlayInputClicks;
/// If YES, then calls ‘setNeedsLayout’ and ‘layoutIfNeeded’ on any frame update of to viewController’s view.
@property (nonatomic) BOOL layoutIfNeededOnUpdate;
/// Disable distance handling within the scope of disabled distance handling viewControllers classes. Within this scope, ‘enabled’ property is ignored. Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledDistanceHandlingClasses;
/// Enable distance handling within the scope of enabled distance handling viewControllers classes. Within this scope, ‘enabled’ property is ignored. Class should be kind of UIViewController. If same Class is added in disabledDistanceHandlingClasses list, then enabledDistanceHandlingClasses will be ignored.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledDistanceHandlingClasses;
/// Disable automatic toolbar creation within the scope of disabled toolbar viewControllers classes. Within this scope, ‘enableAutoToolbar’ property is ignored. Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledToolbarClasses;
/// Enable automatic toolbar creation within the scope of enabled toolbar viewControllers classes. Within this scope, ‘enableAutoToolbar’ property is ignored. Class should be kind of UIViewController. If same Class is added in disabledToolbarClasses list, then enabledToolbarClasses will be ignore.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledToolbarClasses;
/// Allowed subclasses of UIView to add all inner textField, this will allow to navigate between textField contains in different superview. Class should be kind of UIView.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIView)> * _Nonnull toolbarPreviousNextAllowedClasses;
/// Disabled classes to ignore ‘shouldResignOnTouchOutside’ property, Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledTouchResignedClasses;
/// Enabled classes to forcefully enable ‘shouldResignOnTouchOutsite’ property. Class should be kind of UIViewController. If same Class is added in disabledTouchResignedClasses list, then enabledTouchResignedClasses will be ignored.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledTouchResignedClasses;
/// if shouldResignOnTouchOutside is enabled then you can customise the behaviour to not recognise gesture touches on some specific view subclasses. Class should be kind of UIView. Default is [UIControl, UINavigationBar]
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIView)> * _Nonnull touchResignedGestureIgnoreClasses;
/// Add/Remove customised Notification for third party customised TextField/TextView. Please be aware that the Notification object must be idential to UITextField/UITextView Notification objects and customised TextField/TextView support must be idential to UITextField/UITextView.
/// @param didBeginEditingNotificationName This should be identical to UITextViewTextDidBeginEditingNotification
/// @param didEndEditingNotificationName This should be identical to UITextViewTextDidEndEditingNotification
- (void)registerTextFieldViewClass:(SWIFT_METATYPE(UIView) _Nonnull)aClass didBeginEditingNotificationName:(NSString * _Nonnull)didBeginEditingNotificationName didEndEditingNotificationName:(NSString * _Nonnull)didEndEditingNotificationName;
- (void)unregisterTextFieldViewClass:(SWIFT_METATYPE(UIView) _Nonnull)aClass didBeginEditingNotificationName:(NSString * _Nonnull)didBeginEditingNotificationName didEndEditingNotificationName:(NSString * _Nonnull)didEndEditingNotificationName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)reloadLayoutIfNeeded;
@end


@class UIGestureRecognizer;
@class UITouch;

SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager (SWIFT_EXTENSION(VisionCCiOSSDK)) <UIGestureRecognizerDelegate>
/// Note: returning YES is guaranteed to allow simultaneous recognition. returning NO is not guaranteed to prevent simultaneous recognition, as the other gesture’s delegate may return YES.
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// To not detect touch events in a subclass of UIControl, these may have added their own selector for specific work
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager (SWIFT_EXTENSION(VisionCCiOSSDK))
/// reloadInputViews to reload toolbar buttons enable/disable state on the fly Enhancement ID #434.
- (void)reloadInputViews;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager (SWIFT_EXTENSION(VisionCCiOSSDK))
@property (nonatomic) BOOL enableDebugging;
/// @warning Use below methods to completely enable/disable notifications registered by library internally.
/// Please keep in mind that library is totally dependent on NSNotification of UITextField, UITextField, Keyboard etc.
/// If you do unregisterAllNotifications then library will not work at all. You should only use below methods if you want to completedly disable all library functions.
/// You should use below methods at your own risk.
- (void)registerAllNotifications;
- (void)unregisterAllNotifications;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager (SWIFT_EXTENSION(VisionCCiOSSDK))
/// Returns YES if can navigate to previous responder textField/textView, otherwise NO.
@property (nonatomic, readonly) BOOL canGoPrevious;
/// Returns YES if can navigate to next responder textField/textView, otherwise NO.
@property (nonatomic, readonly) BOOL canGoNext;
/// Navigate to previous responder textField/textView.
- (BOOL)goPrevious;
/// Navigate to next responder textField/textView.
- (BOOL)goNext;
@end



SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager (SWIFT_EXTENSION(VisionCCiOSSDK))
- (void)registerKeyboardSizeChangeWithIdentifier:(NSObject * _Nonnull)identifier sizeHandler:(void (^ _Nonnull)(CGSize))sizeHandler;
- (void)unregisterKeyboardSizeChangeWithIdentifier:(NSObject * _Nonnull)identifier;
/// Boolean to know if keyboard is showing.
@property (nonatomic, readonly) BOOL keyboardShowing;
/// To save keyboard rame.
@property (nonatomic, readonly) CGRect keyboardFrame;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager (SWIFT_EXTENSION(VisionCCiOSSDK))
/// moved distance to the top used to maintain distance between keyboard and textField. Most of the time this will be a positive value.
@property (nonatomic, readonly) CGFloat movedDistance;
/// Will be called then movedDistance will be changed
@property (nonatomic, copy) void (^ _Nullable movedDistanceChanged)(CGFloat);
@end

@protocol UITextFieldDelegate;
@protocol UITextViewDelegate;

/// Manages the return key to work like next/done in a view hierarchy.
SWIFT_CLASS("_TtC14VisionCCiOSSDK26IQKeyboardReturnKeyHandler") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardReturnKeyHandler : NSObject
/// Delegate of textField/textView.
@property (nonatomic, weak) id <UITextFieldDelegate, UITextViewDelegate> _Nullable delegate;
/// Set the last textfield return key type. Default is UIReturnKeyDefault.
@property (nonatomic) UIReturnKeyType lastTextFieldReturnKeyType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add all the textFields available in UIViewController’s view.
- (nonnull instancetype)initWithController:(UIViewController * _Nonnull)controller OBJC_DESIGNATED_INITIALIZER;
/// Should pass UITextField/UITextView intance. Assign textFieldView delegate to self, change it’s returnKeyType.
/// @param view UITextField/UITextView object to register.
- (void)addTextFieldView:(UIView * _Nonnull)view;
/// Should pass UITextField/UITextView intance. Restore it’s textFieldView delegate and it’s returnKeyType.
/// @param view UITextField/UITextView object to unregister.
- (void)removeTextFieldView:(UIView * _Nonnull)view;
/// Add all the UITextField/UITextView responderView’s.
/// @param view UIView object to register all it’s responder subviews.
- (void)addResponderFromView:(UIView * _Nonnull)view;
/// Remove all the UITextField/UITextView responderView’s.
/// @param view UIView object to unregister all it’s responder subviews.
- (void)removeResponderFromView:(UIView * _Nonnull)view;
@end

@class UITextField;

SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardReturnKeyHandler (SWIFT_EXTENSION(VisionCCiOSSDK)) <UITextFieldDelegate>
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end

@class UITextView;
@class NSURL;
@class NSTextAttachment;
@class UIMenuElement;
@class UIMenu;
@protocol UIEditMenuInteractionAnimating;

SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardReturnKeyHandler (SWIFT_EXTENSION(VisionCCiOSSDK)) <UITextViewDelegate>
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (UIMenu * _Nullable)textView:(UITextView * _Nonnull)aTextView editMenuForTextInRange:(NSRange)range suggestedActions:(NSArray<UIMenuElement *> * _Nonnull)suggestedActions SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=16.0);
- (void)textView:(UITextView * _Nonnull)aTextView willPresentEditMenuWithAnimator:(id <UIEditMenuInteractionAnimating> _Nonnull)animator SWIFT_AVAILABILITY(ios,introduced=16.0);
- (void)textView:(UITextView * _Nonnull)aTextView willDismissEditMenuWithAnimator:(id <UIEditMenuInteractionAnimating> _Nonnull)animator SWIFT_AVAILABILITY(ios,introduced=16.0);
@end

/// <code>IQPreviousNextDisplayModeDefault</code>
/// Show NextPrevious when there are more than 1 textField otherwise hide.
/// <code>IQPreviousNextDisplayModeAlwaysHide</code>
/// Do not show NextPrevious buttons in any case.
/// <code>IQPreviousNextDisplayModeAlwaysShow</code>
/// Always show nextPrevious buttons, if there are more than 1 textField then both buttons will be visible but will be shown as disabled.
typedef SWIFT_ENUM(NSInteger, IQPreviousNextDisplayMode, open) {
  IQPreviousNextDisplayModeDefault = 0,
  IQPreviousNextDisplayModeAlwaysHide = 1,
  IQPreviousNextDisplayModeAlwaysShow = 2,
};


SWIFT_CLASS("_TtC14VisionCCiOSSDK18IQPreviousNextView") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQPreviousNextView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTextContainer;
@class NSAttributedString;

/// @abstract UITextView with placeholder support
SWIFT_CLASS("_TtC14VisionCCiOSSDK10IQTextView") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQTextView : UITextView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/// @abstract To set textView’s placeholder text color.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable placeholderTextColor;
/// @abstract To set textView’s placeholder text. Default is nil.
@property (nonatomic, copy) IBInspectable NSString * _Nullable placeholder;
- (void)layoutSubviews;
@property (nonatomic, copy) NSString * _Null_unspecified text;
@property (nonatomic, strong) NSAttributedString * _Null_unspecified attributedText;
@property (nonatomic, strong) UIFont * _Nullable font;
@property (nonatomic) NSTextAlignment textAlignment;
@property (nonatomic, weak) id <UITextViewDelegate> _Nullable delegate;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK20IQTitleBarButtonItem") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQTitleBarButtonItem : IQBarButtonItem
@property (nonatomic, strong) UIFont * _Nullable titleFont;
@property (nonatomic, copy) NSString * _Nullable title;
/// titleColor to be used for displaying button text when displaying title (disabled state).
@property (nonatomic, strong) UIColor * _Nullable titleColor;
/// selectableTitleColor to be used for displaying button text when button is enabled.
@property (nonatomic, strong) UIColor * _Nullable selectableTitleColor;
/// Customized Invocation to be called on title button action. titleInvocation is internally created using setTitleTarget:action: method.
@property (nonatomic, strong) IQInvocation * _Nullable invocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// @abstract   IQToolbar for IQKeyboardManager.
SWIFT_CLASS("_TtC14VisionCCiOSSDK9IQToolbar") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQToolbar : UIToolbar <UIInputViewAudioFeedback>
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull previousBarButton;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull nextBarButton;
@property (nonatomic, strong) IQTitleBarButtonItem * _Nonnull titleBarButton;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull doneBarButton;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull fixedSpaceBarButton;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (void)layoutSubviews;
@property (nonatomic, readonly) BOOL enableInputClicksWhenVisible;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK17JRefreshComponent")
@interface JRefreshComponent : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)drawRect:(CGRect)rect;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK14JRefreshFooter")
@interface JRefreshFooter : JRefreshComponent
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK18JRefreshAutoFooter")
@interface JRefreshAutoFooter : JRefreshFooter
@property (nonatomic, getter=isHidden) BOOL hidden;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface JRefreshAutoFooter (SWIFT_EXTENSION(VisionCCiOSSDK))
- (void)prepare;
- (void)willMoveToSuperview:(UIView * _Nullable)newSuperview;
- (void)scrollViewContentSizeDidChange:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change;
- (void)scrollViewContentOffsetDidChange:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change;
- (void)scrollViewPanStateDidChange:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change;
- (void)beginRefreshing;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK23JRefreshAutoStateFooter")
@interface JRefreshAutoStateFooter : JRefreshAutoFooter
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK21JRefreshAutoGifFooter")
@interface JRefreshAutoGifFooter : JRefreshAutoStateFooter
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@interface JRefreshAutoGifFooter (SWIFT_EXTENSION(VisionCCiOSSDK))
- (void)prepare;
- (void)placeSubviews;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK24JRefreshAutoNormalFooter")
@interface JRefreshAutoNormalFooter : JRefreshAutoStateFooter
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface JRefreshAutoNormalFooter (SWIFT_EXTENSION(VisionCCiOSSDK))
- (void)prepare;
- (void)placeSubviews;
@end





@interface JRefreshAutoStateFooter (SWIFT_EXTENSION(VisionCCiOSSDK))
- (void)prepare;
- (void)placeSubviews;
@end




@interface JRefreshComponent (SWIFT_EXTENSION(VisionCCiOSSDK))
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


@interface JRefreshComponent (SWIFT_EXTENSION(VisionCCiOSSDK))
/// 进入刷新状态
- (void)beginRefreshing;
@end


@interface JRefreshComponent (SWIFT_EXTENSION(VisionCCiOSSDK))
/// 初始化
- (void)prepare;
/// 摆放子控件frame
- (void)placeSubviews;
/// 当scrollView的contentOffset发生改变的时候调用
- (void)scrollViewContentOffsetDidChange:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change;
/// 当scrollView的contentSize发生改变的时候调用
- (void)scrollViewContentSizeDidChange:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change;
/// 当scrollView的拖拽状态发生改变的时候调用
- (void)scrollViewPanStateDidChange:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change;
@end



@interface JRefreshFooter (SWIFT_EXTENSION(VisionCCiOSSDK))
- (void)prepare;
@end



SWIFT_CLASS("_TtC14VisionCCiOSSDK14JRefreshHeader")
@interface JRefreshHeader : JRefreshComponent
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK19JRefreshStateHeader")
@interface JRefreshStateHeader : JRefreshHeader
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK17JRefreshGifHeader")
@interface JRefreshGifHeader : JRefreshStateHeader
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface JRefreshGifHeader (SWIFT_EXTENSION(VisionCCiOSSDK))
- (void)prepare;
- (void)placeSubviews;
@end




@interface JRefreshHeader (SWIFT_EXTENSION(VisionCCiOSSDK))
- (void)prepare;
- (void)placeSubviews;
- (void)scrollViewContentOffsetDidChange:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK20JRefreshNormalHeader")
@interface JRefreshNormalHeader : JRefreshStateHeader
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface JRefreshNormalHeader (SWIFT_EXTENSION(VisionCCiOSSDK))
- (void)prepare;
- (void)placeSubviews;
@end



@interface JRefreshStateHeader (SWIFT_EXTENSION(VisionCCiOSSDK))
- (void)prepare;
- (void)placeSubviews;
@end





@class NSData;

/// Concrete implementation of <code>SVGParser</code> that uses Foundation’s <code>XMLParser</code> to parse a given SVG file.
SWIFT_CLASS("_TtC14VisionCCiOSSDK14NSXMLSVGParser")
@interface NSXMLSVGParser : NSXMLParser <NSXMLParserDelegate>
/// :nodoc:
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// The <code>XMLParserDelegate</code> method called when the parser has started parsing an SVG element. This implementation will loop through all supported attributes and dispatch the attribiute value to the given curried function.
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
/// The <code>XMLParserDelegate</code> method called when the parser has ended parsing an SVG element. This methods pops the last element parsed off the stack and checks if there is an enclosing container layer. Every valid SVG file is guaranteed to have at least one container layer (at a minimum, a <code>SVGRootElement</code> instance).
/// If the parser has finished parsing a <code>SVGShapeElement</code>, it will resize the parser’s <code>containerLayer</code> bounding box to fit all subpaths
/// If the parser has finished parsing a <code><svg></code> element, that <code>SVGRootElement</code>‘s container layer is added to this parser’s <code>containerLayer</code>.
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
/// The <code>XMLParserDelegate</code> method called when the parser has finished parsing the SVG document. All supported elements and attributes are guaranteed to be dispatched at this point, but there’s no guarantee that all elements have finished parsing.
/// seealso:
/// <code>CanManageAsychronousParsing</code> <code>finishedProcessing(shapeLayer:)</code>
/// seealso:
/// <code>XMLParserDelegate</code> (<code>parserDidEndDocument(_:)</code>)[https://developer.apple.com/documentation/foundation/xmlparserdelegate/1418172-parserdidenddocument]
- (void)parserDidEndDocument:(NSXMLParser * _Nonnull)parser;
/// The <code>XMLParserDelegate</code> method called when the parser has reached a fatal error in parsing. Parsing is stopped if an error is reached and you may want to check that your SVG file passes validation.
/// seealso:
/// <code>XMLParserDelegate</code> (<code>parser(_:parseErrorOccurred:)</code>)[https://developer.apple.com/documentation/foundation/xmlparserdelegate/1412379-parser]
/// seealso:
/// (SVG Validator)[https://validator.w3.org/]
- (void)parser:(NSXMLParser * _Nonnull)parser parseErrorOccurred:(NSError * _Nonnull)parseError;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data SWIFT_UNAVAILABLE;
@end






/// A <code>CAShapeLayer</code> subclass that allows you to easily work with sublayers and get sizing information
SWIFT_CLASS("_TtC14VisionCCiOSSDK8SVGLayer")
@interface SVGLayer : CAShapeLayer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface SVGLayer (SWIFT_EXTENSION(VisionCCiOSSDK))
/// Applies the given fill color to all sublayers
@property (nonatomic) CGColorRef _Nullable fillColor;
@end



@interface SVGLayer (SWIFT_EXTENSION(VisionCCiOSSDK))
/// Applies the given line width to all <code>CAShapeLayer</code>s
@property (nonatomic) CGFloat lineWidth;
/// Applies the given stroke color to all <code>CAShapeLayer</code>s
@property (nonatomic) CGColorRef _Nullable strokeColor;
@end


/// A <code>UIView</code> subclass that can be used in Interface Builder where you can set the @IBInspectable propert <code>SVGName</code> in the side panel. Use the UIView extensions if you want to creates SVG views programmatically.
SWIFT_CLASS("_TtC14VisionCCiOSSDK7SVGView")
@interface SVGView : UIView
/// The name of the SVG file in the main bundle
@property (nonatomic, copy) IBInspectable NSString * _Nullable SVGName;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end















SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIImage (SWIFT_EXTENSION(VisionCCiOSSDK))
+ (UIImage * _Nullable)keyboardLeftImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardRightImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardUpImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardDownImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardPreviousImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardNextImage SWIFT_WARN_UNUSED_RESULT;
@end





SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIScrollView (SWIFT_EXTENSION(VisionCCiOSSDK))
/// If YES, then scrollview will ignore scrolling (simply not scroll it) for adjusting textfield position. Default is NO.
@property (nonatomic) BOOL shouldIgnoreScrollingAdjustment;
/// If YES, then scrollview will ignore content inset adjustment (simply not updating it) when keyboard is shown. Default is NO.
@property (nonatomic) BOOL shouldIgnoreContentInsetAdjustment;
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
@property (nonatomic) BOOL shouldRestoreScrollViewContentOffset;
@end













SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIView (SWIFT_EXTENSION(VisionCCiOSSDK))
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
@property (nonatomic) CGFloat keyboardDistanceFromTextField;
/// If shouldIgnoreSwitchingByNextPrevious is true then library will ignore this textField/textView while moving to other textField/textView using keyboard toolbar next previous buttons. Default is false
@property (nonatomic) BOOL ignoreSwitchingByNextPrevious;
/// Override Enable/disable managing distance between keyboard and textField behaviour for this particular textField.
@property (nonatomic) enum IQEnableMode enableMode;
/// Override resigns Keyboard on touching outside of UITextField/View behaviour for this particular textField.
@property (nonatomic) enum IQEnableMode shouldResignOnTouchOutsideMode;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIView (SWIFT_EXTENSION(VisionCCiOSSDK))
/// Returns the UIViewController object that manages the receiver.
- (UIViewController * _Nullable)viewContainingController SWIFT_WARN_UNUSED_RESULT;
/// Returns the topMost UIViewController object in hierarchy.
- (UIViewController * _Nullable)topMostController SWIFT_WARN_UNUSED_RESULT;
/// Returns the UIViewController object that is actually the parent of this object. Most of the time it’s the viewController object which actually contains it, but result may be different if it’s viewController is added as childViewController of another viewController.
- (UIViewController * _Nullable)parentContainerViewController SWIFT_WARN_UNUSED_RESULT;
/// Returns the superView of provided class type.
/// @param classType class type of the object which is to be search in above hierarchy and return
/// @param belowView view object in upper hierarchy where method should stop searching and return nil
- (UIView * _Nullable)superviewOfClassType:(SWIFT_METATYPE(UIView) _Nonnull)classType belowView:(UIView * _Nullable)belowView SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIView (SWIFT_EXTENSION(VisionCCiOSSDK))
/// IQToolbar references for better customization control.
@property (nonatomic, readonly, strong) IQToolbar * _Nonnull keyboardToolbar;
/// If <code>shouldHideToolbarPlaceholder</code> is YES, then title will not be added to the toolbar. Default to NO.
@property (nonatomic) BOOL shouldHideToolbarPlaceholder;
/// <code>toolbarPlaceholder</code> to override default <code>placeholder</code> text when drawing text on toolbar.
@property (nonatomic, copy) NSString * _Nullable toolbarPlaceholder;
/// <code>drawingToolbarPlaceholder</code> will be actual text used to draw on toolbar. This would either <code>placeholder</code> or <code>toolbarPlaceholder</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable drawingToolbarPlaceholder;
- (void)addKeyboardToolbarWithTargetWithTarget:(id _Nullable)target titleText:(NSString * _Nullable)titleText rightBarButtonConfiguration:(IQBarButtonItemConfiguration * _Nullable)rightBarButtonConfiguration previousBarButtonConfiguration:(IQBarButtonItemConfiguration * _Nullable)previousBarButtonConfiguration nextBarButtonConfiguration:(IQBarButtonItemConfiguration * _Nullable)nextBarButtonConfiguration;
- (void)addDoneOnKeyboardWithTarget:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addDoneOnKeyboardWithTarget:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)addRightButtonOnKeyboardWithImage:(UIImage * _Nonnull)image target:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightButtonOnKeyboardWithImage:(UIImage * _Nonnull)image target:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)addRightButtonOnKeyboardWithText:(NSString * _Nonnull)text target:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightButtonOnKeyboardWithText:(NSString * _Nonnull)text target:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)addCancelDoneOnKeyboardWithTarget:(id _Nullable)target cancelAction:(SEL _Nonnull)cancelAction doneAction:(SEL _Nonnull)doneAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonTitle:(NSString * _Nonnull)leftButtonTitle rightButtonTitle:(NSString * _Nonnull)rightButtonTitle leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonImage:(UIImage * _Nonnull)leftButtonImage rightButtonImage:(UIImage * _Nonnull)rightButtonImage leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addCancelDoneOnKeyboardWithTarget:(id _Nullable)target cancelAction:(SEL _Nonnull)cancelAction doneAction:(SEL _Nonnull)doneAction titleText:(NSString * _Nullable)titleText;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonTitle:(NSString * _Nonnull)leftButtonTitle rightButtonTitle:(NSString * _Nonnull)rightButtonTitle leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonImage:(UIImage * _Nonnull)leftButtonImage rightButtonImage:(UIImage * _Nonnull)rightButtonImage leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)addPreviousNextDoneOnKeyboardWithTarget:(id _Nullable)target previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction doneAction:(SEL _Nonnull)doneAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonImage:(UIImage * _Nonnull)rightButtonImage previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonTitle:(NSString * _Nonnull)rightButtonTitle previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addPreviousNextDoneOnKeyboardWithTarget:(id _Nullable)target previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction doneAction:(SEL _Nonnull)doneAction titleText:(NSString * _Nullable)titleText;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonImage:(UIImage * _Nonnull)rightButtonImage previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonTitle:(NSString * _Nonnull)rightButtonTitle previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
@end


@class NSLayoutConstraint;

SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIViewController (SWIFT_EXTENSION(VisionCCiOSSDK))
/// This method is provided to override by viewController’s if the library lifts a viewController which you doesn’t want to lift . This may happen if you have implemented side menu feature in your app and the library try to lift the side menu controller. Overriding this method in side menu class to return correct controller should fix the problem.
- (UIViewController * _Nullable)parentIQContainerViewController SWIFT_WARN_UNUSED_RESULT;
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
/// @deprecated    Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Nullable IQLayoutGuideConstraint SWIFT_DEPRECATED_MSG("Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview.");
@end

/// Adjust slider type
typedef SWIFT_ENUM(NSInteger, ZLAdjustSliderType, open) {
  ZLAdjustSliderTypeVertical = 0,
  ZLAdjustSliderTypeHorizontal = 1,
};


SWIFT_CLASS("_TtC14VisionCCiOSSDK16ZLAlbumListModel")
@interface ZLAlbumListModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC14VisionCCiOSSDK19ZLBaseStickertState")
@interface ZLBaseStickertState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum CaptureSessionPreset : NSInteger;
enum FocusMode : NSInteger;
enum ExposureMode : NSInteger;
enum VideoExportType : NSInteger;
enum DevicePosition : NSInteger;

SWIFT_CLASS("_TtC14VisionCCiOSSDK21ZLCameraConfiguration")
@interface ZLCameraConfiguration : NSObject
/// Allow taking photos in the camera (Need allowSelectImage to be true). Defaults to true.
@property (nonatomic) BOOL allowTakePhoto;
/// Allow recording in the camera (Need allowSelectVideo to be true). Defaults to true.
@property (nonatomic) BOOL allowRecordVideo;
/// Minimum recording duration. Defaults to 0.
@property (nonatomic) NSInteger minRecordDuration;
/// Maximum recording duration. Defaults to 20, minimum is 1.
@property (nonatomic) NSInteger maxRecordDuration;
/// Video resolution. Defaults to hd1920x1080.
@property (nonatomic) enum CaptureSessionPreset sessionPreset;
/// Camera focus mode. Defaults to continuousAutoFocus
@property (nonatomic) enum FocusMode focusMode;
/// Camera exposure mode. Defaults to continuousAutoExposure
@property (nonatomic) enum ExposureMode exposureMode;
/// Camera flahs switch. Defaults to true.
@property (nonatomic) BOOL showFlashSwitch;
/// Whether to support switch camera. Defaults to true.
@property (nonatomic) BOOL allowSwitchCamera;
/// Video export format for recording video and editing video. Defaults to mov.
@property (nonatomic) enum VideoExportType videoExportType;
/// The default camera position after entering the camera. Defaults to back.
@property (nonatomic) enum DevicePosition devicePosition;
/// The codecs for video capture. Defaults to .h264
@property (nonatomic) AVVideoCodecType _Nonnull videoCodecType SWIFT_AVAILABILITY(ios,introduced=11.0);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZLCameraConfiguration (SWIFT_EXTENSION(VisionCCiOSSDK))
@end

typedef SWIFT_ENUM(NSInteger, CaptureSessionPreset, open) {
  CaptureSessionPresetCif352x288 = 0,
  CaptureSessionPresetVga640x480 = 1,
  CaptureSessionPresetHd1280x720 = 2,
  CaptureSessionPresetHd1920x1080 = 3,
  CaptureSessionPresetHd4K3840x2160 = 4,
  CaptureSessionPresetPhoto = 5,
};

typedef SWIFT_ENUM(NSInteger, FocusMode, open) {
  FocusModeAutoFocus = 0,
  FocusModeContinuousAutoFocus = 1,
};

typedef SWIFT_ENUM(NSInteger, ExposureMode, open) {
  ExposureModeAutoExpose = 0,
  ExposureModeContinuousAutoExposure = 1,
};

typedef SWIFT_ENUM(NSInteger, VideoExportType, open) {
  VideoExportTypeMov = 0,
  VideoExportTypeMp4 = 1,
};

typedef SWIFT_ENUM(NSInteger, DevicePosition, open) {
  DevicePositionBack = 0,
  DevicePositionFront = 1,
};


@interface ZLCameraConfiguration (SWIFT_EXTENSION(VisionCCiOSSDK))
- (ZLCameraConfiguration * _Nonnull)allowTakePhoto:(BOOL)value;
- (ZLCameraConfiguration * _Nonnull)allowRecordVideo:(BOOL)value;
- (ZLCameraConfiguration * _Nonnull)minRecordDuration:(NSInteger)duration;
- (ZLCameraConfiguration * _Nonnull)maxRecordDuration:(NSInteger)duration;
- (ZLCameraConfiguration * _Nonnull)sessionPreset:(enum CaptureSessionPreset)sessionPreset;
- (ZLCameraConfiguration * _Nonnull)focusMode:(enum FocusMode)mode;
- (ZLCameraConfiguration * _Nonnull)exposureMode:(enum ExposureMode)mode;
- (ZLCameraConfiguration * _Nonnull)showFlashSwitch:(BOOL)value;
- (ZLCameraConfiguration * _Nonnull)allowSwitchCamera:(BOOL)value;
- (ZLCameraConfiguration * _Nonnull)videoExportType:(enum VideoExportType)type;
- (ZLCameraConfiguration * _Nonnull)devicePosition:(enum DevicePosition)position;
- (ZLCameraConfiguration * _Nonnull)videoCodecType:(AVVideoCodecType _Nonnull)type SWIFT_AVAILABILITY(ios,introduced=11.0);
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK19ZLCustomAlertAction")
@interface ZLCustomAlertAction : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC14VisionCCiOSSDK14ZLCustomCamera")
@interface ZLCustomCamera : UIViewController
@property (nonatomic, copy) void (^ _Nullable takeDoneBlock)(UIImage * _Nullable, NSURL * _Nullable);
@property (nonatomic, copy) void (^ _Nullable cancelBlock)(void);
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class CAAnimation;

@interface ZLCustomCamera (SWIFT_EXTENSION(VisionCCiOSSDK)) <CAAnimationDelegate>
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
@end


@interface ZLCustomCamera (SWIFT_EXTENSION(VisionCCiOSSDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class AVCapturePhotoOutput;
@class AVCaptureResolvedPhotoSettings;
@class AVCaptureBracketedStillImageSettings;

@interface ZLCustomCamera (SWIFT_EXTENSION(VisionCCiOSSDK)) <AVCapturePhotoCaptureDelegate>
- (void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output willCapturePhotoForResolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings;
- (void)captureOutput:(AVCapturePhotoOutput * _Nonnull)output didFinishProcessingPhotoSampleBuffer:(CMSampleBufferRef _Nullable)photoSampleBuffer previewPhotoSampleBuffer:(CMSampleBufferRef _Nullable)previewPhotoSampleBuffer resolvedSettings:(AVCaptureResolvedPhotoSettings * _Nonnull)resolvedSettings bracketSettings:(AVCaptureBracketedStillImageSettings * _Nullable)bracketSettings error:(NSError * _Nullable)error;
@end

@class AVCaptureFileOutput;
@class AVCaptureConnection;

@interface ZLCustomCamera (SWIFT_EXTENSION(VisionCCiOSSDK)) <AVCaptureFileOutputRecordingDelegate>
- (void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didStartRecordingToOutputFileAtURL:(NSURL * _Nonnull)fileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections;
- (void)captureOutput:(AVCaptureFileOutput * _Nonnull)output didFinishRecordingToOutputFileAtURL:(NSURL * _Nonnull)outputFileURL fromConnections:(NSArray<AVCaptureConnection *> * _Nonnull)connections error:(NSError * _Nullable)error;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK10ZLDrawPath")
@interface ZLDrawPath : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class ZLImageClipRatio;
@class ZLFilter;
@protocol ZLImageStickerContainerDelegate;

SWIFT_CLASS("_TtC14VisionCCiOSSDK24ZLEditImageConfiguration")
@interface ZLEditImageConfiguration : NSObject
/// Edit image tools.  (This property is only for objc).
/// warning:
/// If you want to use the image sticker feature, you must provide a view that implements ZLImageStickerContainerDelegate.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull tools_objc;
/// Draw colors for image editor.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull drawColors;
/// The default draw color. If this color not in editImageDrawColors, will pick the first color in editImageDrawColors as the default.
@property (nonatomic, strong) UIColor * _Nonnull defaultDrawColor;
/// Edit ratios for image editor.
@property (nonatomic, copy) NSArray<ZLImageClipRatio *> * _Nonnull clipRatios;
/// Text sticker colors for image editor.
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull textStickerTextColors;
/// The default text sticker color. If this color not in textStickerTextColors, will pick the first color in textStickerTextColors as the default.
@property (nonatomic, strong) UIColor * _Nonnull textStickerDefaultTextColor;
/// The default font of text sticker.
@property (nonatomic, strong) UIFont * _Nullable textStickerDefaultFont;
/// Filters for image editor.
@property (nonatomic, copy) NSArray<ZLFilter *> * _Nonnull filters;
@property (nonatomic, strong) UIView <ZLImageStickerContainerDelegate> * _Nullable imageStickerContainerView;
/// Adjust image tools.  (This property is only for objc).
/// Valid when the tools contain EditTool.adjust
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull adjustTools_objc;
/// Give an impact feedback when the adjust slider value is zero. Defaults to true.
@property (nonatomic) BOOL impactFeedbackWhenAdjustSliderValueIsZero;
/// Impact feedback style. Defaults to .medium
@property (nonatomic) UIImpactFeedbackStyle impactFeedbackStyle;
/// Whether to keep clipped area dimmed during adjustments. Defaults to false
@property (nonatomic) BOOL dimClippedAreaDuringAdjustments;
/// Minimum zoom scale, allowing the user to make the edited photo smaller, so it does not overlap top and bottom tools menu. Defaults to 1.0
@property (nonatomic) double minimumZoomScale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZLEditImageConfiguration (SWIFT_EXTENSION(VisionCCiOSSDK))
@end

typedef SWIFT_ENUM(NSInteger, EditTool, open) {
  EditToolDraw = 0,
  EditToolClip = 1,
  EditToolImageSticker = 2,
  EditToolTextSticker = 3,
  EditToolMosaic = 4,
  EditToolFilter = 5,
  EditToolAdjust = 6,
};

typedef SWIFT_ENUM(NSInteger, AdjustTool, open) {
  AdjustToolBrightness = 0,
  AdjustToolContrast = 1,
  AdjustToolSaturation = 2,
};


@interface ZLEditImageConfiguration (SWIFT_EXTENSION(VisionCCiOSSDK))
- (ZLEditImageConfiguration * _Nonnull)drawColors:(NSArray<UIColor *> * _Nonnull)colors;
- (ZLEditImageConfiguration * _Nonnull)defaultDrawColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (ZLEditImageConfiguration * _Nonnull)clipRatios:(NSArray<ZLImageClipRatio *> * _Nonnull)ratios;
- (ZLEditImageConfiguration * _Nonnull)textStickerTextColors:(NSArray<UIColor *> * _Nonnull)colors;
- (ZLEditImageConfiguration * _Nonnull)textStickerDefaultTextColor:(UIColor * _Nonnull)color;
- (ZLEditImageConfiguration * _Nonnull)textStickerDefaultFont:(UIFont * _Nullable)font;
- (ZLEditImageConfiguration * _Nonnull)filters:(NSArray<ZLFilter *> * _Nonnull)filters;
- (ZLEditImageConfiguration * _Nonnull)imageStickerContainerView:(UIView <ZLImageStickerContainerDelegate> * _Nullable)view;
- (ZLEditImageConfiguration * _Nonnull)impactFeedbackWhenAdjustSliderValueIsZero:(BOOL)value;
- (ZLEditImageConfiguration * _Nonnull)impactFeedbackStyle:(UIImpactFeedbackStyle)style;
- (ZLEditImageConfiguration * _Nonnull)dimClippedAreaDuringAdjustments:(BOOL)value;
- (ZLEditImageConfiguration * _Nonnull)minimumZoomScale:(CGFloat)value;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK16ZLEditImageModel")
@interface ZLEditImageModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ZLEnlargeButton;
@class CAGradientLayer;
@class UIButton;
@class UIVisualEffectView;
@class UIImageView;

SWIFT_CLASS("_TtC14VisionCCiOSSDK25ZLEditImageViewController")
@interface ZLEditImageViewController : UIViewController
@property (nonatomic) CGFloat drawColViewH;
@property (nonatomic) CGFloat filterColViewH;
@property (nonatomic) CGFloat adjustColViewH;
@property (nonatomic, strong) ZLEnlargeButton * _Nonnull cancelBtn;
@property (nonatomic, strong) UIScrollView * _Nonnull mainScrollView;
@property (nonatomic, strong) UIView * _Nonnull topShadowView;
@property (nonatomic, strong) CAGradientLayer * _Nonnull topShadowLayer;
@property (nonatomic, strong) UIView * _Nonnull bottomShadowView;
@property (nonatomic, strong) CAGradientLayer * _Nonnull bottomShadowLayer;
@property (nonatomic, strong) UIButton * _Nonnull doneBtn;
@property (nonatomic, strong) ZLEnlargeButton * _Nonnull undoBtn;
@property (nonatomic, strong) ZLEnlargeButton * _Nonnull redoBtn;
@property (nonatomic, strong) ZLEnlargeButton * _Nonnull eraserBtn;
@property (nonatomic, strong) UIVisualEffectView * _Nonnull eraserBtnBgBlurView;
@property (nonatomic, strong) UIView * _Nonnull eraserLineView;
@property (nonatomic, strong) UIImageView * _Nonnull eraserCircleView;
@property (nonatomic, strong) UIView * _Nonnull ashbinView;
@property (nonatomic, strong) UIImageView * _Nonnull ashbinImgView;
@property (nonatomic) CGFloat drawLineWidth;
@property (nonatomic) CGFloat mosaicLineWidth;
@property (nonatomic, copy) void (^ _Nullable editFinishBlock)(UIImage * _Nonnull, ZLEditImageModel * _Nullable);
@property (nonatomic, copy) void (^ _Nullable cancelEditBlock)(void);
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) BOOL prefersHomeIndicatorAutoHidden;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
+ (void)showEditImageVCWithParentVC:(UIViewController * _Nullable)parentVC animate:(BOOL)animate image:(UIImage * _Nonnull)image editModel:(ZLEditImageModel * _Nullable)editModel cancel:(void (^ _Nullable)(void))cancel completion:(void (^ _Nullable)(UIImage * _Nonnull, ZLEditImageModel * _Nullable))completion;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image editModel:(ZLEditImageModel * _Nullable)editModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ZLEditImageViewController (SWIFT_EXTENSION(VisionCCiOSSDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionView;
@class UICollectionViewCell;

@interface ZLEditImageViewController (SWIFT_EXTENSION(VisionCCiOSSDK)) <UICollectionViewDataSource, UICollectionViewDelegate>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end



@interface ZLEditImageViewController (SWIFT_EXTENSION(VisionCCiOSSDK)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
@end


@class AVAsset;

SWIFT_CLASS("_TtC14VisionCCiOSSDK25ZLEditVideoViewController")
@interface ZLEditVideoViewController : UIViewController
@property (nonatomic, copy) void (^ _Nullable editFinishBlock)(NSURL * _Nullable);
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
/// initialize
/// \param avAsset AVAsset对象，需要传入本地视频，网络视频不支持
///
/// \param animateDismiss 退出界面时是否显示dismiss动画
///
- (nonnull instancetype)initWithAvAsset:(AVAsset * _Nonnull)avAsset animateDismiss:(BOOL)animateDismiss OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ZLEditVideoViewController (SWIFT_EXTENSION(VisionCCiOSSDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewLayout;

@interface ZLEditVideoViewController (SWIFT_EXTENSION(VisionCCiOSSDK)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class UIEvent;

SWIFT_CLASS("_TtC14VisionCCiOSSDK15ZLEnlargeButton")
@interface ZLEnlargeButton : UIButton
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum ZLFilterType : NSInteger;

SWIFT_CLASS("_TtC14VisionCCiOSSDK8ZLFilter")
@interface ZLFilter : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name filterType:(enum ZLFilterType)filterType OBJC_DESIGNATED_INITIALIZER;
/// 可传入 applier 自定义滤镜
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name applier:(UIImage * _Nonnull (^ _Nullable)(UIImage * _Nonnull))applier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface ZLFilter (SWIFT_EXTENSION(VisionCCiOSSDK))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<ZLFilter *> * _Nonnull all;)
+ (NSArray<ZLFilter *> * _Nonnull)all SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull normal;)
+ (ZLFilter * _Nonnull)normal SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull clarendon;)
+ (ZLFilter * _Nonnull)clarendon SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull nashville;)
+ (ZLFilter * _Nonnull)nashville SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull apply1977;)
+ (ZLFilter * _Nonnull)apply1977 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull toaster;)
+ (ZLFilter * _Nonnull)toaster SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull chrome;)
+ (ZLFilter * _Nonnull)chrome SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull fade;)
+ (ZLFilter * _Nonnull)fade SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull instant;)
+ (ZLFilter * _Nonnull)instant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull process;)
+ (ZLFilter * _Nonnull)process SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull transfer;)
+ (ZLFilter * _Nonnull)transfer SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull tone;)
+ (ZLFilter * _Nonnull)tone SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull linear;)
+ (ZLFilter * _Nonnull)linear SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull sepia;)
+ (ZLFilter * _Nonnull)sepia SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull mono;)
+ (ZLFilter * _Nonnull)mono SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull noir;)
+ (ZLFilter * _Nonnull)noir SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLFilter * _Nonnull tonal;)
+ (ZLFilter * _Nonnull)tonal SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, ZLFilterType, open) {
  ZLFilterTypeNormal = 0,
  ZLFilterTypeChrome = 1,
  ZLFilterTypeFade = 2,
  ZLFilterTypeInstant = 3,
  ZLFilterTypeProcess = 4,
  ZLFilterTypeTransfer = 5,
  ZLFilterTypeTone = 6,
  ZLFilterTypeLinear = 7,
  ZLFilterTypeSepia = 8,
  ZLFilterTypeMono = 9,
  ZLFilterTypeNoir = 10,
  ZLFilterTypeTonal = 11,
};


SWIFT_CLASS("_TtC14VisionCCiOSSDK16ZLImageClipRatio")
@interface ZLImageClipRatio : NSObject
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, readonly) CGFloat whRatio;
@property (nonatomic, readonly) BOOL isCircle;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title whRatio:(CGFloat)whRatio isCircle:(BOOL)isCircle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface ZLImageClipRatio (SWIFT_EXTENSION(VisionCCiOSSDK))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull custom;)
+ (ZLImageClipRatio * _Nonnull)custom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull circle;)
+ (ZLImageClipRatio * _Nonnull)circle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh1x1;)
+ (ZLImageClipRatio * _Nonnull)wh1x1 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh3x4;)
+ (ZLImageClipRatio * _Nonnull)wh3x4 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh4x3;)
+ (ZLImageClipRatio * _Nonnull)wh4x3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh2x3;)
+ (ZLImageClipRatio * _Nonnull)wh2x3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh3x2;)
+ (ZLImageClipRatio * _Nonnull)wh3x2 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh9x16;)
+ (ZLImageClipRatio * _Nonnull)wh9x16 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ZLImageClipRatio * _Nonnull wh16x9;)
+ (ZLImageClipRatio * _Nonnull)wh16x9 SWIFT_WARN_UNUSED_RESULT;
@end

enum ZLURLType : NSInteger;

SWIFT_CLASS("_TtC14VisionCCiOSSDK24ZLImagePreviewController")
@interface ZLImagePreviewController : UIViewController
@property (nonatomic, copy) void (^ _Nullable longPressBlock)(ZLImagePreviewController * _Nullable, UIImage * _Nullable, NSInteger);
@property (nonatomic, copy) void (^ _Nullable doneBlock)(NSArray * _Nonnull);
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable videoHttpHeader;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) BOOL prefersHomeIndicatorAutoHidden;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
/// \param datas Must be one of PHAsset, UIImage and URL, will filter others in init function.
///
/// \param showBottomView If showSelectBtn is true, showBottomView is always true.
///
/// \param index Index for first display.
///
/// \param urlType Tell me the url is image or video.
///
/// \param urlImageLoader Called when cell will display, cell will layout after callback when image load finish. The first block is progress callback, second is load finish callback.
///
- (nonnull instancetype)initWithDatas:(NSArray * _Nonnull)datas index:(NSInteger)index showSelectBtn:(BOOL)showSelectBtn showBottomView:(BOOL)showBottomView urlType:(enum ZLURLType (^ _Nullable)(NSURL * _Nonnull))urlType urlImageLoader:(void (^ _Nullable)(NSURL * _Nonnull, UIImageView * _Nonnull, void (^ _Nonnull)(CGFloat), void (^ _Nonnull)(void)))urlImageLoader OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ZLImagePreviewController (SWIFT_EXTENSION(VisionCCiOSSDK))
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end


@interface ZLImagePreviewController (SWIFT_EXTENSION(VisionCCiOSSDK)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// Provide an image sticker container view that conform to this protocol must be a subclass of UIView
/// 必须是UIView的子类遵循这个协议
SWIFT_PROTOCOL("_TtP14VisionCCiOSSDK31ZLImageStickerContainerDelegate_")
@protocol ZLImageStickerContainerDelegate
@property (nonatomic, copy) void (^ _Nullable selectImageBlock)(UIImage * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable hideBlock)(void);
- (void)showIn:(UIView * _Nonnull)view;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK19ZLImageStickerState")
@interface ZLImageStickerState : ZLBaseStickertState
@end

typedef SWIFT_ENUM(NSInteger, ZLLanguageType, open) {
  ZLLanguageTypeSystem = 0,
  ZLLanguageTypeChineseSimplified = 1,
  ZLLanguageTypeChineseTraditional = 2,
  ZLLanguageTypeEnglish = 3,
  ZLLanguageTypeJapanese = 4,
  ZLLanguageTypeFrench = 5,
  ZLLanguageTypeGerman = 6,
  ZLLanguageTypeRussian = 7,
  ZLLanguageTypeVietnamese = 8,
  ZLLanguageTypeKorean = 9,
  ZLLanguageTypeMalay = 10,
  ZLLanguageTypeItalian = 11,
  ZLLanguageTypeIndonesian = 12,
  ZLLanguageTypePortuguese = 13,
  ZLLanguageTypeSpanish = 14,
  ZLLanguageTypeTurkish = 15,
  ZLLanguageTypeArabic = 16,
  ZLLanguageTypeDutch = 17,
};


SWIFT_CLASS("_TtC14VisionCCiOSSDK12ZLMosaicPath")
@interface ZLMosaicPath : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ZLNoAuthorityType, open) {
  ZLNoAuthorityTypeLibrary = 0,
  ZLNoAuthorityTypeCamera = 1,
  ZLNoAuthorityTypeMicrophone = 2,
};

typedef SWIFT_ENUM(NSInteger, ZLPhotoBrowserStyle, open) {
/// The album list is embedded in the navigation of the thumbnail interface, click the drop-down display.
  ZLPhotoBrowserStyleEmbedAlbumList = 0,
/// The display relationship between the album list and the thumbnail interface is push.
  ZLPhotoBrowserStyleExternalAlbumList = 1,
};

@class PHAsset;

SWIFT_CLASS("_TtC14VisionCCiOSSDK20ZLPhotoConfiguration")
@interface ZLPhotoConfiguration : NSObject
+ (ZLPhotoConfiguration * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
+ (void)resetConfiguration;
/// Anything superior than 1 will enable the multiple selection feature. Defaults to 9.
@property (nonatomic) NSInteger maxSelectCount;
/// A count for video max selection. Defaults to 0.
/// warning:
/// Only valid in mix selection mode. (i.e. allowMixSelect = true)
@property (nonatomic) NSInteger maxVideoSelectCount;
/// A count for video min selection. Defaults to 0.
/// warning:
/// Only valid in mix selection mode. (i.e. allowMixSelect = true)
@property (nonatomic) NSInteger minVideoSelectCount;
/// Whether photos and videos can be selected together. Defaults to true.
/// If set to false, only one video can be selected. Defaults to true.
@property (nonatomic) BOOL allowMixSelect;
/// Preview selection max preview count, if the value is zero, only show <code>Camera</code>, <code>Album</code>, <code>Cancel</code> buttons. Defaults to 20.
@property (nonatomic) NSInteger maxPreviewCount;
/// If set to false, gif and livephoto cannot be selected either. Defaults to true.
@property (nonatomic) BOOL allowSelectImage;
@property (nonatomic) BOOL allowSelectVideo;
/// If set to true, videos on iCloud will be downloaded before selection. Defaults to false.
/// note:
/// The download timeout time is <code>ZLPhotoConfiguration.default().timeout</code>.
@property (nonatomic) BOOL downloadVideoBeforeSelecting;
/// Allow select Gif, it only controls whether it is displayed in Gif form.
/// If value is false, the Gif logo is not displayed. Defaults to true.
@property (nonatomic) BOOL allowSelectGif;
/// Allow select LivePhoto, it only controls whether it is displayed in LivePhoto form.
/// If value is false, the LivePhoto logo is not displayed. Defaults to false.
@property (nonatomic) BOOL allowSelectLivePhoto;
/// Allow take photos in the album. Defaults to true.
/// warning:
/// If allowTakePhoto and allowRecordVideo are both false, it will not be displayed.
@property (nonatomic) BOOL allowTakePhotoInLibrary;
/// Whether to callback directly after taking a photo. Defaults to false.
@property (nonatomic) BOOL callbackDirectlyAfterTakingPhoto;
@property (nonatomic) BOOL allowEditImage;
@property (nonatomic) BOOL allowEditVideo;
/// After selecting a image/video in the thumbnail interface, enter the editing interface directly. Defaults to false.
/// <ul>
///   <li>
///     discussion: Editing image is only valid when allowEditImage is true and maxSelectCount is 1.
///     Editing video is only valid when allowEditVideo is true and maxSelectCount is 1.
///   </li>
/// </ul>
@property (nonatomic) BOOL editAfterSelectThumbnailImage;
/// Only valid when allowMixSelect is false and allowEditVideo is true. Defaults to true.
/// Just like the Wechat-Timeline selection style. If you want to crop the video after select thumbnail under allowMixSelect = true, please use <em>editAfterSelectThumbnailImage</em>.
@property (nonatomic) BOOL cropVideoAfterSelectThumbnail;
/// If image edit tools only has clip and this property is true. When you click edit, the cropping interface (i.e. ZLClipImageViewController) will be displayed. Defaults to false.
@property (nonatomic) BOOL showClipDirectlyIfOnlyHasClipTool;
/// Save the edited image to the album after editing. Defaults to true.
@property (nonatomic) BOOL saveNewImageAfterEdit;
/// If true, you can slide select photos in album. Defaults to true.
@property (nonatomic) BOOL allowSlideSelect;
/// When slide select is active, will auto scroll to top or bottom when your finger at the top or bottom. Defaults to true.
@property (nonatomic) BOOL autoScrollWhenSlideSelectIsActive;
/// The max speed (pt/s) of auto scroll. Defaults to 600.
@property (nonatomic) CGFloat autoScrollMaxSpeed;
/// If true, you can drag select photo when preview selection style. Defaults to false.
@property (nonatomic) BOOL allowDragSelect;
/// Allow select full image. Defaults to true.
@property (nonatomic) BOOL allowSelectOriginal;
/// Always return the original photo.
/// warning:
/// Only valid when <code>allowSelectOriginal = false</code>, Defaults to false.
@property (nonatomic) BOOL alwaysRequestOriginal;
/// Whether to show the total size of selected photos when selecting the original image. Defaults to true.
/// note:
/// The framework uses a conversion ratio of 1KB=1024Byte, while the system album uses 1KB=1000Byte, so the displayed photo size within the framework will be smaller than the size in the system album.
@property (nonatomic) BOOL showOriginalSizeWhenSelectOriginal;
/// Allow access to the preview large image interface (That is, whether to allow access to the large image interface after clicking the thumbnail image). Defaults to true.
@property (nonatomic) BOOL allowPreviewPhotos;
/// Whether to show the preview button (i.e. the preview button in the lower left corner of the thumbnail interface). Defaults to true.
@property (nonatomic) BOOL showPreviewButtonInAlbum;
/// Whether to display the selected count on the button. Defaults to true.
@property (nonatomic) BOOL showSelectCountOnDoneBtn;
/// In single selection mode, whether to display the selection button. Defaults to false.
@property (nonatomic) BOOL showSelectBtnWhenSingleSelect;
/// Display the index of the selected photos. Defaults to true.
@property (nonatomic) BOOL showSelectedIndex;
/// Maximum cropping time when editing video, unit: second. Defaults to 10.
@property (nonatomic) NSInteger maxEditVideoTime;
/// Allow to choose the maximum duration of the video. Defaults to 120.
@property (nonatomic) NSInteger maxSelectVideoDuration;
/// Allow to choose the minimum duration of the video. Defaults to 0.
@property (nonatomic) NSInteger minSelectVideoDuration;
/// Allow to choose the maximum data size of the video. Defaults to infinite.
@property (nonatomic) CGFloat maxSelectVideoDataSize;
/// Allow to choose the minimum data size of the video. Defaults to 0 KB.
@property (nonatomic) CGFloat minSelectVideoDataSize;
/// Image editor configuration.
@property (nonatomic, strong) ZLEditImageConfiguration * _Nonnull editImageConfiguration;
/// Whether to use custom camera. Defaults to true.
@property (nonatomic) BOOL useCustomCamera;
/// The configuration for camera.
@property (nonatomic, strong) ZLCameraConfiguration * _Nonnull cameraConfiguration;
/// This block will be called before selecting an image, the developer can first determine whether the asset is allowed to be selected.
/// Only control whether it is allowed to be selected, and will not affect the selection logic in the framework.
/// <ul>
///   <li>
///     Tips: If the choice is not allowed, the developer can toast prompt the user for relevant information.
///   </li>
/// </ul>
@property (nonatomic, copy) BOOL (^ _Nullable canSelectAsset)(PHAsset * _Nonnull);
/// This block will be called when selecting an asset.
@property (nonatomic, copy) void (^ _Nullable didSelectAsset)(PHAsset * _Nonnull);
/// This block will be called when cancel selecting an asset.
@property (nonatomic, copy) void (^ _Nullable didDeselectAsset)(PHAsset * _Nonnull);
/// The maximum number of frames for GIF images. To avoid crashes due to memory spikes caused by loading GIF images with too many frames, it is recommended that this value is not too large. Defaults to 50.
@property (nonatomic) NSInteger maxFrameCountForGIF;
/// You can use this block to customize the playback of GIF images to achieve better results. For example, use FLAnimatedImage to play GIFs. Defaults to nil.
@property (nonatomic, copy) void (^ _Nullable gifPlayBlock)(UIImageView * _Nonnull, NSData * _Nonnull, NSDictionary * _Nullable);
/// Pause GIF image playback, used together with gifPlayBlock. Defaults to nil.
@property (nonatomic, copy) void (^ _Nullable pauseGIFBlock)(UIImageView * _Nonnull);
/// Resume GIF image playback, used together with gifPlayBlock. Defaults to nil.
@property (nonatomic, copy) void (^ _Nullable resumeGIFBlock)(UIImageView * _Nonnull);
/// Callback after the no authority alert dismiss.
@property (nonatomic, copy) void (^ _Nullable noAuthorityCallback)(enum ZLNoAuthorityType);
/// Allow user to do something before select photo result callback.
/// And you must call the second parameter of this block to continue the photos selection.
/// The first parameter is the current controller.
/// The second parameter is the block that needs to be called after the user completes the operation.
@property (nonatomic, copy) void (^ _Nullable operateBeforeDoneAction)(UIViewController * _Nonnull, void (^ _Nonnull)(void));
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZLPhotoConfiguration (SWIFT_EXTENSION(VisionCCiOSSDK))
- (ZLPhotoConfiguration * _Nonnull)maxSelectCount:(NSInteger)count;
- (ZLPhotoConfiguration * _Nonnull)maxVideoSelectCount:(NSInteger)count;
- (ZLPhotoConfiguration * _Nonnull)minVideoSelectCount:(NSInteger)count;
- (ZLPhotoConfiguration * _Nonnull)allowMixSelect:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)maxPreviewCount:(NSInteger)count;
- (ZLPhotoConfiguration * _Nonnull)allowSelectImage:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)allowSelectVideo:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)downloadVideoBeforeSelecting:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)allowSelectGif:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)allowSelectLivePhoto:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)allowTakePhotoInLibrary:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)callbackDirectlyAfterTakingPhoto:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)allowEditImage:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)allowEditVideo:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)editAfterSelectThumbnailImage:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)cropVideoAfterSelectThumbnail:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)showClipDirectlyIfOnlyHasClipTool:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)saveNewImageAfterEdit:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)allowSlideSelect:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)autoScrollWhenSlideSelectIsActive:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)autoScrollMaxSpeed:(CGFloat)speed;
- (ZLPhotoConfiguration * _Nonnull)allowDragSelect:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)allowSelectOriginal:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)alwaysRequestOriginal:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)allowPreviewPhotos:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)showPreviewButtonInAlbum:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)showSelectCountOnDoneBtn:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)showSelectBtnWhenSingleSelect:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)showSelectedIndex:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)maxEditVideoTime:(NSInteger)second;
- (ZLPhotoConfiguration * _Nonnull)maxSelectVideoDuration:(NSInteger)duration;
- (ZLPhotoConfiguration * _Nonnull)minSelectVideoDuration:(NSInteger)duration;
- (ZLPhotoConfiguration * _Nonnull)maxSelectVideoDataSize:(CGFloat)size;
- (ZLPhotoConfiguration * _Nonnull)minSelectVideoDataSize:(CGFloat)size;
- (ZLPhotoConfiguration * _Nonnull)editImageConfiguration:(ZLEditImageConfiguration * _Nonnull)configuration;
- (ZLPhotoConfiguration * _Nonnull)useCustomCamera:(BOOL)value;
- (ZLPhotoConfiguration * _Nonnull)cameraConfiguration:(ZLCameraConfiguration * _Nonnull)configuration;
- (ZLPhotoConfiguration * _Nonnull)canSelectAsset:(BOOL (^ _Nullable)(PHAsset * _Nonnull))block;
- (ZLPhotoConfiguration * _Nonnull)didSelectAsset:(void (^ _Nullable)(PHAsset * _Nonnull))block;
- (ZLPhotoConfiguration * _Nonnull)didDeselectAsset:(void (^ _Nullable)(PHAsset * _Nonnull))block;
- (ZLPhotoConfiguration * _Nonnull)maxFrameCountForGIF:(NSInteger)frameCount;
- (ZLPhotoConfiguration * _Nonnull)gifPlayBlock:(void (^ _Nullable)(UIImageView * _Nonnull, NSData * _Nonnull, NSDictionary * _Nullable))block;
- (ZLPhotoConfiguration * _Nonnull)pauseGIFBlock:(void (^ _Nullable)(UIImageView * _Nonnull))block;
- (ZLPhotoConfiguration * _Nonnull)resumeGIFBlock:(void (^ _Nullable)(UIImageView * _Nonnull))block;
- (ZLPhotoConfiguration * _Nonnull)noAuthorityCallback:(void (^ _Nullable)(enum ZLNoAuthorityType))callback;
- (ZLPhotoConfiguration * _Nonnull)operateBeforeDoneAction:(void (^ _Nullable)(UIViewController * _Nonnull, void (^ _Nonnull)(void)))block;
@end

@class ZLPhotoModel;
@class PHLivePhoto;
@class AVPlayerItem;

SWIFT_CLASS("_TtC14VisionCCiOSSDK14ZLPhotoManager")
@interface ZLPhotoManager : NSObject
/// Save image to album.
+ (void)saveImageToAlbumWithImage:(UIImage * _Nonnull)image completion:(void (^ _Nullable)(BOOL, PHAsset * _Nullable))completion;
/// Save video to album.
+ (void)saveVideoToAlbumWithUrl:(NSURL * _Nonnull)url completion:(void (^ _Nullable)(BOOL, PHAsset * _Nullable))completion;
/// Fetch photos from result.
+ (NSArray<ZLPhotoModel *> * _Nonnull)fetchPhotoIn:(PHFetchResult<PHAsset *> * _Nonnull)result ascending:(BOOL)ascending allowSelectImage:(BOOL)allowSelectImage allowSelectVideo:(BOOL)allowSelectVideo limitCount:(NSInteger)limitCount SWIFT_WARN_UNUSED_RESULT;
/// Fetch all album list.
+ (void)getPhotoAlbumListWithAscending:(BOOL)ascending allowSelectImage:(BOOL)allowSelectImage allowSelectVideo:(BOOL)allowSelectVideo completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<ZLAlbumListModel *> * _Nonnull))completion;
/// Fetch camera roll album.
+ (void)getCameraRollAlbumWithAllowSelectImage:(BOOL)allowSelectImage allowSelectVideo:(BOOL)allowSelectVideo completion:(void (^ _Nonnull)(ZLAlbumListModel * _Nonnull))completion;
+ (PHImageRequestID)fetchImageFor:(PHAsset * _Nonnull)asset size:(CGSize)size progress:(void (^ _Nullable)(CGFloat, NSError * _Nullable, BOOL * _Nonnull, NSDictionary * _Nullable))progress completion:(void (^ _Nonnull)(UIImage * _Nullable, BOOL))completion;
+ (PHImageRequestID)fetchOriginalImageFor:(PHAsset * _Nonnull)asset progress:(void (^ _Nullable)(CGFloat, NSError * _Nullable, BOOL * _Nonnull, NSDictionary * _Nullable))progress completion:(void (^ _Nonnull)(UIImage * _Nullable, BOOL))completion;
/// Fetch asset data.
+ (PHImageRequestID)fetchOriginalImageDataFor:(PHAsset * _Nonnull)asset progress:(void (^ _Nullable)(CGFloat, NSError * _Nullable, BOOL * _Nonnull, NSDictionary * _Nullable))progress completion:(void (^ _Nonnull)(NSData * _Nonnull, NSDictionary * _Nullable, BOOL))completion;
+ (PHImageRequestID)fetchLivePhotoFor:(PHAsset * _Nonnull)asset completion:(void (^ _Nonnull)(PHLivePhoto * _Nullable, NSDictionary * _Nullable, BOOL))completion SWIFT_WARN_UNUSED_RESULT;
+ (PHImageRequestID)fetchVideoFor:(PHAsset * _Nonnull)asset progress:(void (^ _Nullable)(CGFloat, NSError * _Nullable, BOOL * _Nonnull, NSDictionary * _Nullable))progress completion:(void (^ _Nonnull)(AVPlayerItem * _Nullable, NSDictionary * _Nullable, BOOL))completion SWIFT_WARN_UNUSED_RESULT;
+ (PHImageRequestID)fetchAVAssetForVideo:(PHAsset * _Nonnull)asset completion:(void (^ _Nonnull)(AVAsset * _Nullable, NSDictionary * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Fetch asset local file path.
/// note:
/// Asynchronously to fetch the file path. calls completionHandler block on the main queue.
+ (void)fetchAssetFilePathFor:(PHAsset * _Nonnull)asset completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
/// Save asset original data to file url. Support save image and video.
/// note:
/// Asynchronously write to a local file. Calls completionHandler block on the main queue. If the asset object is in iCloud, it will be downloaded first and then written in the method. The timeout time is <code>ZLPhotoConfiguration.default().timeout</code>.
+ (void)saveAsset:(PHAsset * _Nonnull)asset toFile:(NSURL * _Nonnull)fileUrl completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZLPhotoManager (SWIFT_EXTENSION(VisionCCiOSSDK))
+ (BOOL)hasPhotoLibratyAuthority SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)hasCameraAuthority SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)hasMicrophoneAuthority SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK12ZLPhotoModel")
@interface ZLPhotoModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class ZLResultModel;

SWIFT_CLASS("_TtC14VisionCCiOSSDK19ZLPhotoPreviewSheet")
@interface ZLPhotoPreviewSheet : UIView
/// Success callback
/// block params
/// <ul>
///   <li>
///     params1: result models
///   </li>
///   <li>
///     params2: is full image
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable selectImageBlock)(NSArray<ZLResultModel *> * _Nonnull, BOOL);
/// Callback for photos that failed to parse
/// block params
/// <ul>
///   <li>
///     params1: failed assets.
///   </li>
///   <li>
///     params2: index for asset
///   </li>
/// </ul>
@property (nonatomic, copy) void (^ _Nullable selectImageRequestErrorBlock)(NSArray<PHAsset *> * _Nonnull, NSArray<NSNumber *> * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable cancelBlock)(void);
/// \param selectedAssets preselected assets
///
- (nonnull instancetype)initWithSelectedAssets:(NSArray<PHAsset *> * _Nullable)selectedAssets;
/// Using this init method, you can continue editing the selected photo.
/// note:
///
/// Provided that saveNewImageAfterEdit = false
/// \param results preselected results
///
- (nonnull instancetype)initWithResults:(NSArray<ZLResultModel *> * _Nullable)results;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (void)showPreviewWithAnimate:(BOOL)animate sender:(UIViewController * _Nonnull)sender;
- (void)showPhotoLibraryWithSender:(UIViewController * _Nonnull)sender;
/// 传入已选择的assets，并预览
- (void)previewAssetsWithSender:(UIViewController * _Nonnull)sender assets:(NSArray<PHAsset *> * _Nonnull)assets index:(NSInteger)index isOriginal:(BOOL)isOriginal showBottomViewAndSelectBtn:(BOOL)showBottomViewAndSelectBtn;
@end


@interface ZLPhotoPreviewSheet (SWIFT_EXTENSION(VisionCCiOSSDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class PHChange;

@interface ZLPhotoPreviewSheet (SWIFT_EXTENSION(VisionCCiOSSDK)) <PHPhotoLibraryChangeObserver>
- (void)photoLibraryDidChange:(PHChange * _Nonnull)changeInstance;
@end

@class UIImagePickerController;

@interface ZLPhotoPreviewSheet (SWIFT_EXTENSION(VisionCCiOSSDK)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
- (void)imagePickerControllerDidCancel:(UIImagePickerController * _Nonnull)picker;
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
@end


@interface ZLPhotoPreviewSheet (SWIFT_EXTENSION(VisionCCiOSSDK)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

enum CancelButtonStyle : NSInteger;
enum ZLProgressHUDStyle : NSInteger;
@class UIBlurEffect;

/// In an application, most of the UI configurations related to the album are uniform. Therefore, this class attempts to extract properties that are not affected by different album selection scenarios, avoiding redundant configurations for each different selection scenario.
/// Custom UI configuration (include colors, images, text, font)
SWIFT_CLASS("_TtC14VisionCCiOSSDK22ZLPhotoUIConfiguration")
@interface ZLPhotoUIConfiguration : NSObject
+ (ZLPhotoUIConfiguration * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
+ (void)resetConfiguration;
/// Photo sorting method, the preview interface is not affected by this parameter. Defaults to true.
@property (nonatomic) BOOL sortAscending;
@property (nonatomic) enum ZLPhotoBrowserStyle style;
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// text: Cancel.  image: ‘x’. Defaults to image.
@property (nonatomic) enum CancelButtonStyle navCancelButtonStyle;
/// Whether to show the status bar when previewing photos. Defaults to false.
@property (nonatomic) BOOL showStatusBarInPreviewInterface;
/// HUD style. Defaults to dark.
@property (nonatomic) enum ZLProgressHUDStyle hudStyle;
/// Adjust Slider Type
@property (nonatomic) enum ZLAdjustSliderType adjustSliderType;
@property (nonatomic) CGFloat cellCornerRadio;
/// The column count when iPhone is in portait mode. Minimum is 2, maximum is 6. Defaults to 4.
/// \code
/// iPhone landscape mode: columnCount += 2.
/// iPad portait mode: columnCount += 2.
/// iPad landscape mode: columnCount += 4.
///
/// \endcodenote:
/// This property is ignored when using columnCountBlock.
@property (nonatomic) NSInteger columnCount;
/// Use this property to customize the column count for <code>ZLThumbnailViewController</code>.
/// This property is recommended.
@property (nonatomic, copy) NSInteger (^ _Nullable columnCountBlock)(CGFloat);
/// The minimum spacing to use between items in the same row for <code>ZLThumbnailViewController</code>.
@property (nonatomic) CGFloat minimumInteritemSpacing;
/// The minimum spacing to use between lines of items in the grid for <code>ZLThumbnailViewController</code>.
@property (nonatomic) CGFloat minimumLineSpacing;
/// In thumb image interface, control whether to display the selection button animation when selecting. Defaults to false.
@property (nonatomic) BOOL animateSelectBtnWhenSelectInThumbVC;
/// In preview interface, control whether to display the selection button animation when selecting. Defaults to true.
@property (nonatomic) BOOL animateSelectBtnWhenSelectInPreviewVC;
/// Animation duration for select button. Defaults to 0.5.
@property (nonatomic) CFTimeInterval selectBtnAnimationDuration;
/// Whether to display the serial number above the selected button. Defaults to false.
@property (nonatomic) BOOL showIndexOnSelectBtn;
/// Whether to display scroll to bottom button. Defaults to false.
@property (nonatomic) BOOL showScrollToBottomBtn;
/// Show the image captured by the camera is displayed on the camera button inside the album. Defaults to false.
@property (nonatomic) BOOL showCaptureImageOnTakePhotoBtn;
/// Overlay a mask layer on top of the selected photos. Defaults to true.
@property (nonatomic) BOOL showSelectedMask;
/// Display a border on the selected photos cell. Defaults to false.
@property (nonatomic) BOOL showSelectedBorder;
/// Overlay a mask layer above the cells that cannot be selected. Defaults to true.
@property (nonatomic) BOOL showInvalidMask;
/// Display the selected photos at the bottom of the preview large photos interface. Defaults to true.
@property (nonatomic) BOOL showSelectedPhotoPreview;
/// If user choose limited Photo mode, a button with ‘+’ will be added to the ZLThumbnailViewController. It will call PHPhotoLibrary.shared().presentLimitedLibraryPicker(from:) to add photo. Defaults to true.
@property (nonatomic) BOOL showAddPhotoButton;
/// iOS14 limited Photo mode, will show collection footer view in ZLThumbnailViewController.
/// Will go to system setting if clicked. Defaults to true.
@property (nonatomic) BOOL showEnterSettingTips;
/// Timeout for image parsing. Defaults to 20.
@property (nonatomic) NSTimeInterval timeout;
/// The blur effect of the navigation bar in the album list
@property (nonatomic, strong) UIBlurEffect * _Nullable navViewBlurEffectOfAlbumList;
/// The blur effect of the navigation bar in the preview interface
@property (nonatomic, strong) UIBlurEffect * _Nullable navViewBlurEffectOfPreview;
/// The blur effect of the bottom tool bar in the album list
@property (nonatomic, strong) UIBlurEffect * _Nullable bottomViewBlurEffectOfAlbumList;
/// The blur effect of the bottom tool bar in the preview interface
@property (nonatomic, strong) UIBlurEffect * _Nullable bottomViewBlurEffectOfPreview;
/// Developers can customize images, but the name of the custom image resource must be consistent with the image name in the replaced bundle.
/// <ul>
///   <li>
///     example: Developers need to replace the selected and unselected image resources, and the array that needs to be passed in is
///     [“zl_btn_selected”, “zl_btn_unselected”].
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull customImageNames;
/// Developers can customize images, but the name of the custom image resource must be consistent with the image name in the replaced bundle.
/// <ul>
///   <li>
///     example: Developers need to replace the selected and unselected image resources, and the array that needs to be passed in is
///     [“zl_btn_selected”: selectedImage, “zl_btn_unselected”: unselectedImage].
///   </li>
/// </ul>
@property (nonatomic, copy) NSDictionary<NSString *, UIImage *> * _Nonnull customImageForKey_objc;
/// Language for framework.
@property (nonatomic) enum ZLLanguageType languageType;
/// Developers can customize languages (This property is only for objc).
/// warning:
/// Please pay attention to the placeholders contained in languages when changing, such as %ld, %@.
/// <ul>
///   <li>
///     example: If you needs to replace
///     key: @“loading”, value: @“loading, waiting please” language,
///     The dictionary that needs to be passed in is @[@“hudLoading”: @“text to be replaced”].
///   </li>
/// </ul>
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull customLanguageKeyValue_objc;
/// Font name.
@property (nonatomic, copy) NSString * _Nullable themeFontName;
/// The theme color of framework.
/// 框架主题色
@property (nonatomic, strong) UIColor * _Nonnull themeColor;
/// Preview selection mode, translucent background color above.
/// 预览快速选择模式下，上方透明区域背景色
@property (nonatomic, strong) UIColor * _Nonnull sheetTranslucentColor;
/// Preview selection mode, a background color for <code>Camera</code>, <code>Album</code>, <code>Cancel</code> buttons.
/// 预览快速选择模式下，按钮背景颜色
@property (nonatomic, strong) UIColor * _Nonnull sheetBtnBgColor;
/// Preview selection mode, a text color for <code>Camera</code>, <code>Album</code>, <code>Cancel</code> buttons.
/// 预览快速选择模式下，按钮标题颜色
@property (nonatomic, strong) UIColor * _Nonnull sheetBtnTitleColor;
/// Preview selection mode, cancel button title color when the selection amount is superior than 0.
/// 预览快速选择模式下，按钮标题高亮颜色
@property (nonatomic, strong) UIColor * _Nonnull sheetBtnTitleTintColor;
/// A color for navigation bar.
/// 相册列表及小图界面导航条背景色
@property (nonatomic, strong) UIColor * _Nonnull navBarColor;
/// A color for navigation bar in preview interface.
/// 预览大图界面的导航条背景色
@property (nonatomic, strong) UIColor * _Nonnull navBarColorOfPreviewVC;
/// A color for Navigation bar text.
/// 相册列表及小图界面导航栏标题颜色
@property (nonatomic, strong) UIColor * _Nonnull navTitleColor;
/// A color for Navigation bar text of preview vc.
/// 预览大图界面导航栏标题颜色
@property (nonatomic, strong) UIColor * _Nonnull navTitleColorOfPreviewVC;
/// The background color of the title view when the frame style is embedAlbumList.
/// 下拉选择相册列表模式下，选择区域的背景色
@property (nonatomic, strong) UIColor * _Nonnull navEmbedTitleViewBgColor;
/// A color for background in album list.
/// 相册列表背景色
@property (nonatomic, strong) UIColor * _Nonnull albumListBgColor;
/// A color of the translucent area below the embed album list.
/// 嵌入式相册列表下方透明区域颜色
@property (nonatomic, strong) UIColor * _Nonnull embedAlbumListTranslucentColor;
/// A color for album list title label.
/// 相册列表标题颜色
@property (nonatomic, strong) UIColor * _Nonnull albumListTitleColor;
/// A color for album list count label.
/// 相册列表数量label的颜色
@property (nonatomic, strong) UIColor * _Nonnull albumListCountColor;
/// A color for album list separator.
/// 相册列表分割线颜色
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
/// A color for background in thumbnail interface.
/// 相册小图界面背景色
@property (nonatomic, strong) UIColor * _Nonnull thumbnailBgColor;
/// A color for background in preview interface..
/// 预览大图界面背景色
@property (nonatomic, strong) UIColor * _Nonnull previewVCBgColor;
/// A color for background in bottom tool view.
/// 相册小图界面底部工具条背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBgColor;
/// A color for background in bottom tool view in preview interface.
/// 预览大图界面底部工具条背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBgColorOfPreviewVC;
/// Title color of the original image size label in the album thumbnail interface.
/// 相册小图界面原图大小label的text颜色
@property (nonatomic, strong) UIColor * _Nonnull originalSizeLabelTextColor;
/// Title color of the original image size label in the preview interface.
/// 预览大图界面原图大小label的text颜色
@property (nonatomic, strong) UIColor * _Nonnull originalSizeLabelTextColorOfPreviewVC;
/// The normal state title color of bottom tool view buttons. Without done button.
/// 相册小图界面底部按钮可交互状态下标题颜色，不包括 <code>完成</code> 按钮
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnNormalTitleColor;
/// The normal state title color of bottom tool view done button.
/// 相册小图界面底部 <code>完成</code> 按钮可交互状态下标题颜色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewDoneBtnNormalTitleColor;
/// The normal state title color of bottom tool view buttons in preview interface.  Without done button.
/// 预览大图界面底部按钮可交互状态下标题颜色，不包括 <code>完成</code> 按钮
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnNormalTitleColorOfPreviewVC;
/// The normal state title color of bottom tool view done button.
/// 预览大图界面底部 <code>完成</code> 按钮可交互状态下标题颜色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewDoneBtnNormalTitleColorOfPreviewVC;
/// The disable state title color of bottom tool view buttons.  Without done button.
/// 相册小图界面底部按钮不可交互状态下标题颜色，不包括 <code>完成</code> 按钮
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnDisableTitleColor;
/// The disable state title color of bottom tool view done button.
/// 相册小图界面底部 <code>完成</code> 按钮不可交互状态下标题颜色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewDoneBtnDisableTitleColor;
/// The disable state title color of bottom tool view buttons in preview interface.  Without done button.
/// 预览大图界面底部按钮不可交互状态下标题颜色，不包括 <code>完成</code> 按钮
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnDisableTitleColorOfPreviewVC;
/// The disable state title color of bottom tool view done button  in preview interface.
/// 预览大图界面底部 <code>完成</code> 按钮不可交互状态下标题颜色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewDoneBtnDisableTitleColorOfPreviewVC;
/// The normal state background color of bottom tool view buttons.
/// 相册小图界面底部按钮可交互状态下背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnNormalBgColor;
/// The normal state background color of bottom tool view buttons in preview interface.
/// 预览大图界面底部按钮可交互状态下背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnNormalBgColorOfPreviewVC;
/// The disable state background color of bottom tool view buttons.
/// 相册小图界面底部按钮不可交互状态下背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnDisableBgColor;
/// The disable state background color of bottom tool view buttons in preview interface.
/// 预览大图界面底部按钮不可交互状态下背景色
@property (nonatomic, strong) UIColor * _Nonnull bottomToolViewBtnDisableBgColorOfPreviewVC;
/// With iOS14 limited authority, a color for select more photos at the bottom of the thumbnail interface.
/// iOS14 limited权限下，下方提示选择更多图片信息文字的颜色
@property (nonatomic, strong) UIColor * _Nonnull limitedAuthorityTipsColor;
/// The record progress color of custom camera.
/// 自定义相机录制视频时进度条颜色
@property (nonatomic, strong) UIColor * _Nonnull cameraRecodeProgressColor;
/// Mask layer color of selected cell.
/// 已选择照片上方遮罩阴影颜色
@property (nonatomic, strong) UIColor * _Nonnull selectedMaskColor;
/// Border color of selected cell.
/// 已选择照片border颜色
@property (nonatomic, strong) UIColor * _Nonnull selectedBorderColor;
/// Mask layer color of the cell that cannot be selected.
/// 不可选的照片上方遮罩阴影颜色
@property (nonatomic, strong) UIColor * _Nonnull invalidMaskColor;
/// The text color of selected cell index label.
/// 已选照片右上角序号label背景色
@property (nonatomic, strong) UIColor * _Nonnull indexLabelTextColor;
/// The background color of selected cell index label.
/// 已选照片右上角序号label背景色
@property (nonatomic, strong) UIColor * _Nonnull indexLabelBgColor;
/// The background color of camera cell inside album.
/// 相册小图界面拍照按钮背景色
@property (nonatomic, strong) UIColor * _Nonnull cameraCellBgColor;
/// The normal color of adjust slider.
/// 编辑图片，调整饱和度、对比度、亮度时，右侧slider背景色
@property (nonatomic, strong) UIColor * _Nonnull adjustSliderNormalColor;
/// The tint color of adjust slider.
/// 编辑图片，调整饱和度、对比度、亮度时，右侧slider背景高亮色
@property (nonatomic, strong) UIColor * _Nonnull adjustSliderTintColor;
/// The normal color of the title below the various tools in the image editor.
/// 图片编辑器中各种工具下方标题普通状态下的颜色
@property (nonatomic, strong) UIColor * _Nonnull imageEditorToolTitleNormalColor;
/// The tint color of the title below the various tools in the image editor.
/// 图片编辑器中各种工具下方标题高亮状态下的颜色
@property (nonatomic, strong) UIColor * _Nonnull imageEditorToolTitleTintColor;
/// The tint color of the image editor tool icons.
/// 图片编辑器中各种工具图标高亮状态下的颜色
@property (nonatomic, strong) UIColor * _Nullable imageEditorToolIconTintColor;
/// Background color of trash can in image editor.
/// 编辑器中垃圾箱普通状态下的颜色
@property (nonatomic, strong) UIColor * _Nonnull trashCanBackgroundNormalColor;
/// Background tint color of trash can in image editor.
/// 编辑器中垃圾箱高亮状态下的颜色
@property (nonatomic, strong) UIColor * _Nonnull trashCanBackgroundTintColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CancelButtonStyle, open) {
  CancelButtonStyleText = 0,
  CancelButtonStyleImage = 1,
};


@interface ZLPhotoUIConfiguration (SWIFT_EXTENSION(VisionCCiOSSDK))
- (ZLPhotoUIConfiguration * _Nonnull)sortAscending:(BOOL)ascending;
- (ZLPhotoUIConfiguration * _Nonnull)style:(enum ZLPhotoBrowserStyle)style;
- (ZLPhotoUIConfiguration * _Nonnull)statusBarStyle:(UIStatusBarStyle)statusBarStyle;
- (ZLPhotoUIConfiguration * _Nonnull)navCancelButtonStyle:(enum CancelButtonStyle)style;
- (ZLPhotoUIConfiguration * _Nonnull)showStatusBarInPreviewInterface:(BOOL)value;
- (ZLPhotoUIConfiguration * _Nonnull)hudStyle:(enum ZLProgressHUDStyle)style;
- (ZLPhotoUIConfiguration * _Nonnull)adjustSliderType:(enum ZLAdjustSliderType)type;
- (ZLPhotoUIConfiguration * _Nonnull)cellCornerRadio:(CGFloat)cornerRadio;
/// note:
/// This property is ignored when using columnCountBlock.
- (ZLPhotoUIConfiguration * _Nonnull)columnCount:(NSInteger)count;
- (ZLPhotoUIConfiguration * _Nonnull)columnCountBlock:(NSInteger (^ _Nullable)(CGFloat))block;
- (ZLPhotoUIConfiguration * _Nonnull)minimumInteritemSpacing:(CGFloat)value;
- (ZLPhotoUIConfiguration * _Nonnull)minimumLineSpacing:(CGFloat)value;
- (ZLPhotoUIConfiguration * _Nonnull)animateSelectBtnWhenSelectInThumbVC:(BOOL)animate;
- (ZLPhotoUIConfiguration * _Nonnull)animateSelectBtnWhenSelectInPreviewVC:(BOOL)animate;
- (ZLPhotoUIConfiguration * _Nonnull)selectBtnAnimationDuration:(CFTimeInterval)duration;
- (ZLPhotoUIConfiguration * _Nonnull)showIndexOnSelectBtn:(BOOL)value;
- (ZLPhotoUIConfiguration * _Nonnull)showScrollToBottomBtn:(BOOL)value;
- (ZLPhotoUIConfiguration * _Nonnull)showCaptureImageOnTakePhotoBtn:(BOOL)value;
- (ZLPhotoUIConfiguration * _Nonnull)showSelectedMask:(BOOL)value;
- (ZLPhotoUIConfiguration * _Nonnull)showSelectedBorder:(BOOL)value;
- (ZLPhotoUIConfiguration * _Nonnull)showInvalidMask:(BOOL)value;
- (ZLPhotoUIConfiguration * _Nonnull)showSelectedPhotoPreview:(BOOL)value;
- (ZLPhotoUIConfiguration * _Nonnull)showAddPhotoButton:(BOOL)value;
- (ZLPhotoUIConfiguration * _Nonnull)showEnterSettingTips:(BOOL)value;
- (ZLPhotoUIConfiguration * _Nonnull)timeout:(NSTimeInterval)timeout;
- (ZLPhotoUIConfiguration * _Nonnull)navViewBlurEffectOfAlbumList:(UIBlurEffect * _Nullable)effect;
- (ZLPhotoUIConfiguration * _Nonnull)navViewBlurEffectOfPreview:(UIBlurEffect * _Nullable)effect;
- (ZLPhotoUIConfiguration * _Nonnull)bottomViewBlurEffectOfAlbumList:(UIBlurEffect * _Nullable)effect;
- (ZLPhotoUIConfiguration * _Nonnull)bottomViewBlurEffectOfPreview:(UIBlurEffect * _Nullable)effect;
- (ZLPhotoUIConfiguration * _Nonnull)customImageNames:(NSArray<NSString *> * _Nonnull)names;
- (ZLPhotoUIConfiguration * _Nonnull)languageType:(enum ZLLanguageType)type;
- (ZLPhotoUIConfiguration * _Nonnull)themeFontName:(NSString * _Nonnull)name;
- (ZLPhotoUIConfiguration * _Nonnull)themeColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)sheetTranslucentColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)sheetBtnBgColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)sheetBtnTitleColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)sheetBtnTitleTintColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)navBarColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)navBarColorOfPreviewVC:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)navTitleColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)navTitleColorOfPreviewVC:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)navEmbedTitleViewBgColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)albumListBgColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)embedAlbumListTranslucentColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)albumListTitleColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)albumListCountColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)separatorColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)thumbnailBgColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)previewVCBgColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewBgColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewBgColorOfPreviewVC:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)originalSizeLabelTextColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)originalSizeLabelTextColorOfPreviewVC:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewBtnNormalTitleColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewDoneBtnNormalTitleColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewBtnNormalTitleColorOfPreviewVC:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewDoneBtnNormalTitleColorOfPreviewVC:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewBtnDisableTitleColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewDoneBtnDisableTitleColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewBtnDisableTitleColorOfPreviewVC:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewDoneBtnDisableTitleColorOfPreviewVC:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewBtnNormalBgColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewBtnNormalBgColorOfPreviewVC:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewBtnDisableBgColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)bottomToolViewBtnDisableBgColorOfPreviewVC:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)limitedAuthorityTipsColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)cameraRecodeProgressColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)selectedMaskColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)selectedBorderColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)invalidMaskColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)indexLabelTextColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)indexLabelBgColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)cameraCellBgColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)adjustSliderNormalColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)adjustSliderTintColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)imageEditorToolTitleNormalColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)imageEditorToolTitleTintColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)imageEditorToolIconTintColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)trashCanBackgroundNormalColor:(UIColor * _Nonnull)color;
- (ZLPhotoUIConfiguration * _Nonnull)trashCanBackgroundTintColor:(UIColor * _Nonnull)color;
@end


SWIFT_CLASS("_TtC14VisionCCiOSSDK13ZLProgressHUD")
@interface ZLProgressHUD : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)hide;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



@interface ZLProgressHUD (SWIFT_EXTENSION(VisionCCiOSSDK))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ZLProgressHUDStyle, "Style", open) {
  ZLProgressHUDStyleLight = 0,
  ZLProgressHUDStyleLightBlur = 1,
  ZLProgressHUDStyleDark = 2,
  ZLProgressHUDStyleDarkBlur = 3,
};


SWIFT_CLASS("_TtC14VisionCCiOSSDK13ZLResultModel")
@interface ZLResultModel : NSObject
@property (nonatomic, readonly, strong) PHAsset * _Nonnull asset;
@property (nonatomic, readonly, strong) UIImage * _Nonnull image;
/// Whether the picture has been edited. Always false when <code>saveNewImageAfterEdit = true</code>.
@property (nonatomic, readonly) BOOL isEdited;
/// Content of the last edit. Always nil when <code>saveNewImageAfterEdit = true</code>.
@property (nonatomic, readonly, strong) ZLEditImageModel * _Nullable editModel;
/// The order in which the user selects the models in the album. This index is not necessarily equal to the order of the model’s index in the array, as some PHAssets requests may fail.
@property (nonatomic, readonly) NSInteger index;
- (nonnull instancetype)initWithAsset:(PHAsset * _Nonnull)asset image:(UIImage * _Nonnull)image isEdited:(BOOL)isEdited editModel:(ZLEditImageModel * _Nullable)editModel index:(NSInteger)index OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC14VisionCCiOSSDK18ZLTextStickerState")
@interface ZLTextStickerState : ZLBaseStickertState
@end

typedef SWIFT_ENUM(NSInteger, ZLURLType, open) {
  ZLURLTypeImage = 0,
  ZLURLTypeVideo = 1,
};


SWIFT_CLASS("_TtC14VisionCCiOSSDK14ZLVideoManager")
@interface ZLVideoManager : NSObject
/// 没有针对不同分辨率视频做处理，仅用于处理相机拍照的视频
+ (void)mergeVideosWithFileUrls:(NSArray<NSURL *> * _Nonnull)fileUrls completion:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface ZLVideoManager (SWIFT_EXTENSION(VisionCCiOSSDK))
@end

typedef SWIFT_ENUM(NSInteger, ExportType, open) {
  ExportTypeMov = 0,
  ExportTypeMp4 = 1,
};


@interface ZLVideoManager (SWIFT_EXTENSION(VisionCCiOSSDK))
+ (void)exportVideoFor:(PHAsset * _Nonnull)asset exportType:(enum ExportType)exportType presetName:(NSString * _Nonnull)presetName complete:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))complete;
+ (void)exportVideoFor:(AVAsset * _Nonnull)asset range:(CMTimeRange)range exportType:(enum ExportType)exportType presetName:(NSString * _Nonnull)presetName complete:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))complete;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
