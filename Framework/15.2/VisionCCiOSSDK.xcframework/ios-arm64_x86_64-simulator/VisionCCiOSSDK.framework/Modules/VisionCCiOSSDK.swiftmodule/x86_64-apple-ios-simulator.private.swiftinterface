// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VisionCCiOSSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFAudio
import AVFoundation
import AVKit
import Accelerate
import Alamofire
import AudioToolbox
import CommonCrypto
import CoreFoundation
import CoreGraphics
import CoreMotion
import Foundation
import JXSegmentedView
import LocalAuthentication
import MobileCoreServices
import ObjectiveC
import Photos
import PhotosUI
import QuartzCore
import Realm
import RealmSwift
import RxCocoa
import RxSwift
import SnapKit
import SocketIO
import Swift
import UIKit.UIGestureRecognizerSubclass
import UIKit
import UniformTypeIdentifiers
@_exported import VisionCCiOSSDK
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension VisionCCiOSSDK.ZLPhotoUIConfiguration {
  @objc @discardableResult
  dynamic public func sortAscending(_ ascending: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func style(_ style: VisionCCiOSSDK.ZLPhotoBrowserStyle) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func statusBarStyle(_ statusBarStyle: UIKit.UIStatusBarStyle) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func navCancelButtonStyle(_ style: VisionCCiOSSDK.ZLPhotoUIConfiguration.CancelButtonStyle) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func showStatusBarInPreviewInterface(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func hudStyle(_ style: VisionCCiOSSDK.ZLProgressHUD.Style) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func adjustSliderType(_ type: VisionCCiOSSDK.ZLAdjustSliderType) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func cellCornerRadio(_ cornerRadio: CoreFoundation.CGFloat) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @discardableResult
  public func customAlertClass(_ alertClass: (any VisionCCiOSSDK.ZLCustomAlertProtocol.Type)?) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func columnCount(_ count: Swift.Int) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func columnCountBlock(_ block: ((_ collectionViewWidth: CoreFoundation.CGFloat) -> Swift.Int)?) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func minimumInteritemSpacing(_ value: CoreFoundation.CGFloat) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func minimumLineSpacing(_ value: CoreFoundation.CGFloat) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func animateSelectBtnWhenSelectInThumbVC(_ animate: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func animateSelectBtnWhenSelectInPreviewVC(_ animate: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func selectBtnAnimationDuration(_ duration: CoreFoundation.CFTimeInterval) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func showIndexOnSelectBtn(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func showScrollToBottomBtn(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func showCaptureImageOnTakePhotoBtn(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func showSelectedMask(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func showSelectedBorder(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func showInvalidMask(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func showSelectedPhotoPreview(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func showAddPhotoButton(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func showEnterSettingTips(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func timeout(_ timeout: Foundation.TimeInterval) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func navViewBlurEffectOfAlbumList(_ effect: UIKit.UIBlurEffect?) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func navViewBlurEffectOfPreview(_ effect: UIKit.UIBlurEffect?) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomViewBlurEffectOfAlbumList(_ effect: UIKit.UIBlurEffect?) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomViewBlurEffectOfPreview(_ effect: UIKit.UIBlurEffect?) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func customImageNames(_ names: [Swift.String]) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @discardableResult
  public func customImageForKey(_ map: [Swift.String : UIKit.UIImage?]) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func languageType(_ type: VisionCCiOSSDK.ZLLanguageType) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @discardableResult
  public func customLanguageKeyValue(_ map: [VisionCCiOSSDK.ZLLocalLanguageKey : Swift.String]) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func themeFontName(_ name: Swift.String) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func themeColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func sheetTranslucentColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func sheetBtnBgColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func sheetBtnTitleColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func sheetBtnTitleTintColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func navBarColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func navBarColorOfPreviewVC(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func navTitleColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func navTitleColorOfPreviewVC(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func navEmbedTitleViewBgColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func albumListBgColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func embedAlbumListTranslucentColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func albumListTitleColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func albumListCountColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func separatorColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func thumbnailBgColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func previewVCBgColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewBgColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewBgColorOfPreviewVC(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func originalSizeLabelTextColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func originalSizeLabelTextColorOfPreviewVC(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewBtnNormalTitleColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewDoneBtnNormalTitleColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewBtnNormalTitleColorOfPreviewVC(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewDoneBtnNormalTitleColorOfPreviewVC(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewBtnDisableTitleColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewDoneBtnDisableTitleColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewBtnDisableTitleColorOfPreviewVC(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewDoneBtnDisableTitleColorOfPreviewVC(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewBtnNormalBgColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewBtnNormalBgColorOfPreviewVC(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewBtnDisableBgColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func bottomToolViewBtnDisableBgColorOfPreviewVC(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func limitedAuthorityTipsColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func cameraRecodeProgressColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func selectedMaskColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func selectedBorderColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func invalidMaskColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func indexLabelTextColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func indexLabelBgColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func cameraCellBgColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func adjustSliderNormalColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func adjustSliderTintColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func imageEditorToolTitleNormalColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func imageEditorToolTitleTintColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func imageEditorToolIconTintColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func trashCanBackgroundNormalColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc @discardableResult
  dynamic public func trashCanBackgroundTintColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLPhotoUIConfiguration
}
@objc @_hasMissingDesignatedInitializers public class ZLBaseStickertState : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ZLImageStickerState : VisionCCiOSSDK.ZLBaseStickertState {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class ZLTextStickerState : VisionCCiOSSDK.ZLBaseStickertState {
  @objc deinit
}
public struct SVGParserSupportedElements {
  public typealias ElementGenerator = () -> any VisionCCiOSSDK.SVGElement
  public let tags: [Swift.String : VisionCCiOSSDK.SVGParserSupportedElements.ElementGenerator]
  public init(tags: [Swift.String : VisionCCiOSSDK.SVGParserSupportedElements.ElementGenerator])
  public static var barebones: VisionCCiOSSDK.SVGParserSupportedElements {
    get
  }
  public static var allSupportedElements: VisionCCiOSSDK.SVGParserSupportedElements {
    get
  }
}
public class MessageModel : Swift.Codable {
  final public let messageUUId: Swift.String
  public var mId: Swift.Int64?
  public var createTime: Swift.Double?
  public var timestamp: Swift.Double?
  public var timeFormatInfo: Swift.String?
  public var cMid: Swift.String?
  public var mType: Swift.Int?
  public var messageBody: VisionCCiOSSDK.MessageBody?
  public var optionSelected: Swift.String?
  public var sUserId: Swift.String?
  public var sessionId: Swift.String?
  public var mStatus: Swift.Int?
  public var memberType: Swift.Int?
  public var isSensitive: Swift.Bool?
  public var sessionStartTime: Swift.Double?
  public var renderMemberType: Swift.Int?
  public init(mId: Swift.Int64? = nil, createTime: Swift.Double? = nil, timestamp: Swift.Double? = nil, timeFormatInfo: Swift.String? = nil, cMid: Swift.String? = nil, mType: Swift.Int? = nil, messageBody: VisionCCiOSSDK.MessageBody? = nil, optionSelected: Swift.String? = nil, sUserId: Swift.String? = nil, sessionId: Swift.String? = nil, mStatus: Swift.Int? = nil, memberType: Swift.Int? = nil, isSensitive: Swift.Bool? = nil, sessionStartTime: Swift.Double? = nil, renderMemberType: Swift.Int? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class MessageBody : Swift.Codable {
  public var options: [VisionCCiOSSDK.MessageOptions]?
  public var mediaUrl: Swift.String?
  public var duration: Swift.Double?
  public var width: Swift.Float?
  public var height: Swift.Float?
  public var content: Swift.String?
  public var image: Foundation.Data?
  public var name: Swift.String?
  public var voiceLocalPath: Swift.String?
  public var annexLocalData: Foundation.Data?
  public var annexLocalPath: Swift.String?
  public var contentType: Swift.String?
  public var fileName: Swift.String?
  public var fileSize: Swift.Double?
  public var videoLocalPath: Swift.String?
  public var videoCoverImage: Foundation.Data?
  public var coverUrl: Swift.String?
  public var videoName: Swift.String?
  public var linkUrl: Swift.String?
  public var title: Swift.String?
  public var link_description: Swift.String?
  public var openMethod: Swift.Int?
  public var imageUrl: Swift.String?
  public var question_group: [VisionCCiOSSDK.MessageQuestions]?
  public var url: Swift.String?
  public var button: Swift.String?
  public var cardType: Swift.Int?
  public var cardGuide: Swift.String?
  public var cardDesc: Swift.String?
  public var cardImg: Swift.String?
  public var cardLink: Swift.String?
  public var customFields: [VisionCCiOSSDK.MessageCustomFields]?
  public var customItems: [VisionCCiOSSDK.MessageCustomItems]?
  public var customMenus: [VisionCCiOSSDK.MessageCustomMenus]?
  public var titleWord: Swift.String?
  public var stfTemplateId: Swift.Int64?
  public var pushType: Swift.Int?
  public var customPageUrl: Swift.String?
  public var styleType: Swift.Int?
  public var satisfactionOptions: [VisionCCiOSSDK.EvaluatOptionsModel]?
  public var isEvaluated: Swift.Bool?
  public var validPeriod: Swift.Int?
  public var businessProps: [Swift.String : Swift.String]?
  public init(options: [VisionCCiOSSDK.MessageOptions]? = nil, mediaUrl: Swift.String? = nil, duration: Swift.Double? = nil, width: Swift.Float? = nil, height: Swift.Float? = nil, content: Swift.String? = nil, image: Foundation.Data? = nil, name: Swift.String? = nil, voiceLocalPath: Swift.String? = nil, annexLocalData: Foundation.Data? = nil, annexLocalPath: Swift.String? = nil, contentType: Swift.String? = nil, fileName: Swift.String? = nil, fileSize: Swift.Double? = nil, videoLocalPath: Swift.String? = nil, videoCoverImage: Foundation.Data? = nil, coverUrl: Swift.String? = nil, videoName: Swift.String? = nil, linkUrl: Swift.String? = nil, title: Swift.String? = nil, link_description: Swift.String? = nil, openMethod: Swift.Int? = nil, imageUrl: Swift.String? = nil, question_group: [VisionCCiOSSDK.MessageQuestions]? = nil, url: Swift.String? = nil, button: Swift.String? = nil, cardType: Swift.Int? = nil, cardGuide: Swift.String? = nil, cardDesc: Swift.String? = nil, cardImg: Swift.String? = nil, cardLink: Swift.String? = nil, customFields: [VisionCCiOSSDK.MessageCustomFields]? = nil, customItems: [VisionCCiOSSDK.MessageCustomItems]? = nil, customMenus: [VisionCCiOSSDK.MessageCustomMenus]? = nil, titleWord: Swift.String? = nil, stfTemplateId: Swift.Int64? = nil, pushType: Swift.Int? = nil, customPageUrl: Swift.String? = nil, styleType: Swift.Int? = nil, satisfactionOptions: [VisionCCiOSSDK.EvaluatOptionsModel]? = nil, isEvaluated: Swift.Bool? = nil, validPeriod: Swift.Int? = nil, businessProps: [Swift.String : Swift.String]? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class MessageOptions : Swift.Codable {
  public var id: VisionCCiOSSDK.AnyCodable?
  public var title: Swift.String?
  public init(id: VisionCCiOSSDK.AnyCodable? = nil, title: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class MessageQuestions : Swift.Codable {
  public var name: Swift.String?
  public var items: [VisionCCiOSSDK.MessageGroupItems]
  public init(name: Swift.String? = nil, items: [VisionCCiOSSDK.MessageGroupItems] = [MessageGroupItems]())
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class MessageGroupItems : Swift.Codable {
  public init(id: VisionCCiOSSDK.AnyCodable? = nil, title: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class MessageCustomItems : Swift.Codable {
  public init(customMenus: [VisionCCiOSSDK.MessageCustomMenus]? = nil, customFields: [VisionCCiOSSDK.MessageCustomFields]? = nil, customCardDesc: Swift.String? = nil, customCardLink: Swift.String? = nil, customCardName: Swift.String? = nil, customCardAmount: Swift.String? = nil, customCardThumbnail: Swift.String? = nil, customCardAmountSymbol: Swift.String? = nil, customCardAmountName: Swift.String? = nil, customCardOriginalAmount: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class MessageCustomMenus : Swift.Codable {
  public init(type: Swift.Int? = nil, title: Swift.String? = nil, command: Swift.String? = nil, visible: [Swift.String]? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class MessageCustomFields : Swift.Codable {
  public init(key: Swift.String? = nil, value: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol Strokable {
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ZLEditVideoViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var editFinishBlock: ((Foundation.URL?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public init(avAsset: AVFoundation.AVAsset, animateDismiss: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
}
extension VisionCCiOSSDK.ZLEditVideoViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension VisionCCiOSSDK.ZLEditVideoViewController : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
}
public protocol Identifiable {
}
public protocol SVGParser {
  init(SVGData: Foundation.Data, supportedElements: VisionCCiOSSDK.SVGParserSupportedElements?, completion: ((VisionCCiOSSDK.SVGLayer) -> ())?)
  var completionBlock: ((VisionCCiOSSDK.SVGLayer) -> ())? { get }
  var supportedElements: VisionCCiOSSDK.SVGParserSupportedElements? { get }
  var containerLayer: VisionCCiOSSDK.SVGLayer { get }
  func startParsing()
}
extension RxSwift.Reactive where Base : AnyObject {
  public var disposeBag: RxSwift.DisposeBag {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class JRefreshGifHeader : VisionCCiOSSDK.JRefreshStateHeader {
  @_Concurrency.MainActor(unsafe) override open var pullingPercent: CoreFoundation.CGFloat? {
    get
    set(newPullingPercent)
  }
  @_Concurrency.MainActor(unsafe) override open var state: VisionCCiOSSDK.JRefreshState {
    get
    set(newState)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension VisionCCiOSSDK.JRefreshGifHeader {
  @_Concurrency.MainActor(unsafe) public func setImages(_ images: Swift.Array<UIKit.UIImage>, _ duration: Foundation.TimeInterval, _ state: VisionCCiOSSDK.JRefreshState)
  @_Concurrency.MainActor(unsafe) public func setImages(_ images: Swift.Array<UIKit.UIImage>, _ state: VisionCCiOSSDK.JRefreshState)
}
extension VisionCCiOSSDK.JRefreshGifHeader {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeSubviews()
}
extension QuartzCore.CALayer {
  @discardableResult
  convenience public init(SVGURL: Foundation.URL, parser: (any VisionCCiOSSDK.SVGParser)? = nil, completion: @escaping (VisionCCiOSSDK.SVGLayer) -> ())
  @discardableResult
  convenience public init(SVGData: Foundation.Data, parser: (any VisionCCiOSSDK.SVGParser)? = nil, completion: @escaping (VisionCCiOSSDK.SVGLayer) -> ())
}
extension UIKit.UIColor {
  convenience public init?(cssName: Swift.String)
}
extension Swift.String {
  public subscript(integerRange: Swift.Range<Swift.Int>) -> Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @objc deinit
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholderTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var attributedPlaceholder: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override weak dynamic open var delegate: (any UIKit.UITextViewDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
}
public struct JRefreshConst {
}
public struct JRefreshKeyPath {
}
public struct JRefreshHead {
}
public struct JRefreshAutoFoot {
}
public let JRefreshLabelFont: UIKit.UIFont
public let JRefreshLabelTextColor: UIKit.UIColor
public enum JRefreshState : Swift.Int {
  case Idle
  case Pulling
  case Refreshing
  case WillRefresh
  case NoMoreData
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class JRefreshComponent : UIKit.UIView {
  public typealias Block = (() -> ())?
  @_Concurrency.MainActor(unsafe) public var refreshing: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var state: VisionCCiOSSDK.JRefreshState {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var pullingPercent: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var automaticallyChangeAlpha: Swift.Bool? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
extension VisionCCiOSSDK.JRefreshComponent {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func beginRefreshing()
  @_Concurrency.MainActor(unsafe) public func beginRefreshingWithCompletionBlock(_ completionBlock: VisionCCiOSSDK.JRefreshComponent.Block)
  @_Concurrency.MainActor(unsafe) public func endRefreshing()
  @_Concurrency.MainActor(unsafe) public func endRefreshingWithCompletionBlock(_ completionBlock: VisionCCiOSSDK.JRefreshComponent.Block)
}
extension VisionCCiOSSDK.JRefreshComponent {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func prepare()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func placeSubviews()
  @objc @_Concurrency.MainActor(unsafe) dynamic open func scrollViewContentOffsetDidChange(_ change: [Foundation.NSKeyValueChangeKey : Any]?)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func scrollViewContentSizeDidChange(_ change: [Foundation.NSKeyValueChangeKey : Any]?)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func scrollViewPanStateDidChange(_ change: [Foundation.NSKeyValueChangeKey : Any]?)
}
extension VisionCCiOSSDK.JRefreshComponent {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SVGView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var SVGName: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VisionCCiOSSDK.ZLPhotoConfiguration {
  @objc @discardableResult
  dynamic public func maxSelectCount(_ count: Swift.Int) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func maxVideoSelectCount(_ count: Swift.Int) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func minVideoSelectCount(_ count: Swift.Int) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func allowMixSelect(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func maxPreviewCount(_ count: Swift.Int) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func allowSelectImage(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @discardableResult
  @objc dynamic public func allowSelectVideo(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @discardableResult
  @objc dynamic public func downloadVideoBeforeSelecting(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func allowSelectGif(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func allowSelectLivePhoto(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func allowTakePhotoInLibrary(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func callbackDirectlyAfterTakingPhoto(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func allowEditImage(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func allowEditVideo(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func editAfterSelectThumbnailImage(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func cropVideoAfterSelectThumbnail(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func showClipDirectlyIfOnlyHasClipTool(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func saveNewImageAfterEdit(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func allowSlideSelect(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func autoScrollWhenSlideSelectIsActive(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func autoScrollMaxSpeed(_ speed: CoreFoundation.CGFloat) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func allowDragSelect(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func allowSelectOriginal(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func alwaysRequestOriginal(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func allowPreviewPhotos(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func showPreviewButtonInAlbum(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func showSelectCountOnDoneBtn(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func showSelectBtnWhenSingleSelect(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func showSelectedIndex(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func maxEditVideoTime(_ second: VisionCCiOSSDK.ZLPhotoConfiguration.Second) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func maxSelectVideoDuration(_ duration: VisionCCiOSSDK.ZLPhotoConfiguration.Second) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func minSelectVideoDuration(_ duration: VisionCCiOSSDK.ZLPhotoConfiguration.Second) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func maxSelectVideoDataSize(_ size: VisionCCiOSSDK.ZLPhotoConfiguration.KBUnit) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func minSelectVideoDataSize(_ size: VisionCCiOSSDK.ZLPhotoConfiguration.KBUnit) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func editImageConfiguration(_ configuration: VisionCCiOSSDK.ZLEditImageConfiguration) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func useCustomCamera(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func cameraConfiguration(_ configuration: VisionCCiOSSDK.ZLCameraConfiguration) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func canSelectAsset(_ block: ((Photos.PHAsset) -> Swift.Bool)?) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func didSelectAsset(_ block: ((Photos.PHAsset) -> Swift.Void)?) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func didDeselectAsset(_ block: ((Photos.PHAsset) -> Swift.Void)?) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func maxFrameCountForGIF(_ frameCount: Swift.Int) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func gifPlayBlock(_ block: ((UIKit.UIImageView, Foundation.Data, [Swift.AnyHashable : Any]?) -> Swift.Void)?) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func pauseGIFBlock(_ block: ((UIKit.UIImageView) -> Swift.Void)?) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func resumeGIFBlock(_ block: ((UIKit.UIImageView) -> Swift.Void)?) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func noAuthorityCallback(_ callback: ((VisionCCiOSSDK.ZLNoAuthorityType) -> Swift.Void)?) -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc @discardableResult
  dynamic public func operateBeforeDoneAction(_ block: ((UIKit.UIViewController, @escaping () -> Swift.Void) -> Swift.Void)?) -> VisionCCiOSSDK.ZLPhotoConfiguration
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class JRefreshAutoStateFooter : VisionCCiOSSDK.JRefreshAutoFooter {
  @_Concurrency.MainActor(unsafe) public var labelLeftInset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var stateLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var refreshingTitleHidden: Swift.Bool
  @_Concurrency.MainActor(unsafe) override open var state: VisionCCiOSSDK.JRefreshState {
    get
    set(newState)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension VisionCCiOSSDK.JRefreshAutoStateFooter {
  @_Concurrency.MainActor(unsafe) public func setTitle(_ title: Swift.String?, _ state: VisionCCiOSSDK.JRefreshState)
}
extension VisionCCiOSSDK.JRefreshAutoStateFooter {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeSubviews()
}
@_hasMissingDesignatedInitializers open class SVGCache {
  public static let `default`: VisionCCiOSSDK.SVGCache
  final public let memoryCache: Foundation.NSCache<Foundation.NSString, VisionCCiOSSDK.SVGLayer>
  public subscript(key: Swift.String) -> VisionCCiOSSDK.SVGLayer? {
    get
    set
  }
  public func removeObject(key: Swift.String)
  @objc deinit
}
extension UIKit.UIBezierPath {
  convenience public init(pathString: Swift.String)
  @available(*, deprecated, message: "This method is deprecated. If you want to parse a single path, instantiate a new instance of SVGPath using the SVGPath(singlePathString:) initializer and pass the path string.")
  public class func pathWithSVGURL(_ SVGURL: Foundation.URL) -> UIKit.UIBezierPath?
}
public enum ZLCustomAlertStyle {
  case alert
  case actionSheet
  public static func == (a: VisionCCiOSSDK.ZLCustomAlertStyle, b: VisionCCiOSSDK.ZLCustomAlertStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ZLCustomAlertProtocol : AnyObject {
  static func alert(title: Swift.String?, message: Swift.String, style: VisionCCiOSSDK.ZLCustomAlertStyle) -> any VisionCCiOSSDK.ZLCustomAlertProtocol
  func addAction(_ action: VisionCCiOSSDK.ZLCustomAlertAction)
  func show(with parentVC: UIKit.UIViewController?)
}
@objc public class ZLCustomAlertAction : ObjectiveC.NSObject {
  public enum Style {
    case `default`
    case tint
    case cancel
    case destructive
    public static func == (a: VisionCCiOSSDK.ZLCustomAlertAction.Style, b: VisionCCiOSSDK.ZLCustomAlertAction.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let title: Swift.String
  final public let style: VisionCCiOSSDK.ZLCustomAlertAction.Style
  final public let handler: ((VisionCCiOSSDK.ZLCustomAlertAction) -> Swift.Void)?
  @objc deinit
  public init(title: Swift.String, style: VisionCCiOSSDK.ZLCustomAlertAction.Style, handler: ((VisionCCiOSSDK.ZLCustomAlertAction) -> Swift.Void)?)
}
@objc @_Concurrency.MainActor(unsafe) open class ZLCustomCamera : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var takeDoneBlock: ((UIKit.UIImage?, Foundation.URL?) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var cancelBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var tipsLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var bottomView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var largeCircleView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var smallCircleView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var borderLayer: QuartzCore.CAShapeLayer {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var animateLayer: QuartzCore.CAShapeLayer {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var retakeBtn: VisionCCiOSSDK.ZLEnlargeButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var doneBtn: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var dismissBtn: VisionCCiOSSDK.ZLEnlargeButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var flashBtn: VisionCCiOSSDK.ZLEnlargeButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var switchCameraBtn: VisionCCiOSSDK.ZLEnlargeButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var focusCursorView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var takedImageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
}
extension VisionCCiOSSDK.ZLCustomCamera : AVFoundation.AVCapturePhotoCaptureDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photoSampleBuffer: CoreMedia.CMSampleBuffer?, previewPhoto previewPhotoSampleBuffer: CoreMedia.CMSampleBuffer?, resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings, bracketSettings: AVFoundation.AVCaptureBracketedStillImageSettings?, error: (any Swift.Error)?)
}
extension VisionCCiOSSDK.ZLCustomCamera : AVFoundation.AVCaptureFileOutputRecordingDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func fileOutput(_ output: AVFoundation.AVCaptureFileOutput, didStartRecordingTo fileURL: Foundation.URL, from connections: [AVFoundation.AVCaptureConnection])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func fileOutput(_ output: AVFoundation.AVCaptureFileOutput, didFinishRecordingTo outputFileURL: Foundation.URL, from connections: [AVFoundation.AVCaptureConnection], error: (any Swift.Error)?)
}
extension VisionCCiOSSDK.ZLCustomCamera : QuartzCore.CAAnimationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
}
extension VisionCCiOSSDK.ZLCustomCamera : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class JRefreshAutoNormalFooter : VisionCCiOSSDK.JRefreshAutoStateFooter {
  @_Concurrency.MainActor(unsafe) public var activityIndicatorViewStyle: UIKit.UIActivityIndicatorView.Style {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var loadingView: UIKit.UIActivityIndicatorView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var state: VisionCCiOSSDK.JRefreshState {
    get
    set(newState)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension VisionCCiOSSDK.JRefreshAutoNormalFooter {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeSubviews()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class JRefreshStateHeader : VisionCCiOSSDK.JRefreshHeader {
  @_Concurrency.MainActor(unsafe) public var lastUpdatedTimeText: ((_ lastUpdatedTime: Foundation.Date?) -> Swift.String)?
  @_Concurrency.MainActor(unsafe) public var lastUpdatedTimeLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var labelLeftInset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var stateLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var state: VisionCCiOSSDK.JRefreshState {
    get
    set(newState)
  }
  @_Concurrency.MainActor(unsafe) public func setTitle(_ title: Swift.String?, _ state: VisionCCiOSSDK.JRefreshState)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension VisionCCiOSSDK.JRefreshStateHeader {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeSubviews()
}
public protocol SVGLayerType {
  var boundingBox: CoreFoundation.CGRect { get }
}
extension VisionCCiOSSDK.SVGLayerType where Self : QuartzCore.CALayer {
  @discardableResult
  public func resizeToFit(_ rect: CoreFoundation.CGRect) -> Self
}
@objc @_inheritsConvenienceInitializers open class SVGLayer : QuartzCore.CAShapeLayer, VisionCCiOSSDK.SVGLayerType {
  public var boundingBox: CoreFoundation.CGRect
  @objc override dynamic public init()
  @objc override dynamic public init(layer: Any)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VisionCCiOSSDK.SVGLayer {
  public var svgLayerCopy: VisionCCiOSSDK.SVGLayer? {
    get
  }
}
extension VisionCCiOSSDK.SVGLayer {
  @objc override dynamic open var fillColor: CoreGraphics.CGColor? {
    @objc get
    @objc set
  }
}
extension VisionCCiOSSDK.SVGLayer {
  @objc override dynamic open var lineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc override dynamic open var strokeColor: CoreGraphics.CGColor? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQTitleBarButtonItem : VisionCCiOSSDK.IQBarButtonItem {
  @objc @_Concurrency.MainActor(unsafe) open var titleFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var selectableTitleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override open var invocation: VisionCCiOSSDK.IQInvocation? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum ZLEditorAction {
  case draw(VisionCCiOSSDK.ZLDrawPath)
  case eraser([VisionCCiOSSDK.ZLDrawPath])
  case clip(oldStatus: VisionCCiOSSDK.ZLClipStatus, newStatus: VisionCCiOSSDK.ZLClipStatus)
  case sticker(oldState: VisionCCiOSSDK.ZLBaseStickertState?, newState: VisionCCiOSSDK.ZLBaseStickertState?)
  case mosaic(VisionCCiOSSDK.ZLMosaicPath)
  case filter(oldFilter: VisionCCiOSSDK.ZLFilter?, newFilter: VisionCCiOSSDK.ZLFilter?)
  case adjust(oldStatus: VisionCCiOSSDK.ZLAdjustStatus, newStatus: VisionCCiOSSDK.ZLAdjustStatus)
}
public struct EvaluatLabelModel : Swift.Codable {
  public var stfLabelsId: Swift.Int64?
  public var stfOptionsId: Swift.Int64?
  public var labelsName: Swift.String?
  public var labelsValue: Swift.String?
  public var sort: Swift.Int?
  public var isSelected: Swift.Bool?
  public init(stfLabelsId: Swift.Int64? = nil, stfOptionsId: Swift.Int64? = nil, labelsName: Swift.String? = nil, labelsValue: Swift.String? = nil, sort: Swift.Int? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EvaluatOptionsModel : Swift.Codable {
  public var stfOptionsId: Swift.Int64?
  public var pattern: Swift.Int?
  public var sort: Swift.Int?
  public var tagRequired: Swift.Bool?
  public var remarkRequired: Swift.Bool?
  public var optionsName: Swift.String?
  public var optionsScore: Swift.Int?
  public var optionsIcon: Swift.String?
  public var labels: [VisionCCiOSSDK.EvaluatLabelModel]?
  public init(stfOptionsId: Swift.Int64? = nil, pattern: Swift.Int? = nil, sort: Swift.Int? = nil, tagRequired: Swift.Bool? = nil, remarkRequired: Swift.Bool? = nil, optionsName: Swift.String? = nil, optionsScore: Swift.Int? = nil, optionsIcon: Swift.String? = nil, labels: [VisionCCiOSSDK.EvaluatLabelModel]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EvaluatResultModel : Swift.Codable {
  public var main: VisionCCiOSSDK.EvaluatResultMainModel?
  public var options: [VisionCCiOSSDK.EvaluatResultOptionsModel]?
  public init(main: VisionCCiOSSDK.EvaluatResultMainModel? = nil, options: [VisionCCiOSSDK.EvaluatResultOptionsModel]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EvaluatResultMainModel : Swift.Codable {
  public var satisfactionId: Swift.Int64?
  public var stfTemplateId: Swift.Int64?
  public var sessionId: Swift.String?
  public var evaluatorId: Swift.String?
  public var receptionistId: Swift.String?
  public var score: Swift.Int?
  public var comment: Swift.String?
  public var createTime: Swift.Double?
  public var titleWord: Swift.String?
  public var appreciateWord: Swift.String?
  public var pattern: Swift.Int?
  public var enableResolved: Swift.Bool?
  public var biggerSocreBetter: Swift.Bool?
  public init(satisfactionId: Swift.Int64? = nil, stfTemplateId: Swift.Int64? = nil, sessionId: Swift.String? = nil, evaluatorId: Swift.String? = nil, receptionistId: Swift.String? = nil, score: Swift.Int? = nil, comment: Swift.String? = nil, createTime: Swift.Double? = nil, titleWord: Swift.String? = nil, appreciateWord: Swift.String? = nil, pattern: Swift.Int? = nil, enableResolved: Swift.Bool? = nil, biggerSocreBetter: Swift.Bool? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EvaluatResultOptionsModel : Swift.Codable {
  public var stfOptionsId: Swift.Int64?
  public var choosedValues: [Swift.String]?
  public var choosedNames: [Swift.String]?
  public var sort: Swift.Int?
  public var tagRequired: Swift.Bool?
  public var remarkRequired: Swift.Bool?
  public var optionsName: Swift.String?
  public var optionsScore: Swift.Int?
  public var optionsIcon: Swift.String?
  public init(stfOptionsId: Swift.Int64? = nil, choosedValues: [Swift.String]? = nil, choosedNames: [Swift.String]? = nil, sort: Swift.Int? = nil, tagRequired: Swift.Bool? = nil, remarkRequired: Swift.Bool? = nil, optionsName: Swift.String? = nil, optionsScore: Swift.Int? = nil, optionsIcon: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewContainingController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func topMostController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func parentContainerViewController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func superviewOfClassType(_ classType: UIKit.UIView.Type, belowView: UIKit.UIView? = nil) -> UIKit.UIView?
}
public struct ZLPhotoBrowserWrapper<Base> {
  public let base: Base
  public init(_ base: Base)
}
public protocol ZLPhotoBrowserCompatible : AnyObject {
}
public protocol ZLPhotoBrowserCompatibleValue {
}
extension VisionCCiOSSDK.ZLPhotoBrowserCompatible {
  public var zl: VisionCCiOSSDK.ZLPhotoBrowserWrapper<Self> {
    get
    set
  }
  public static var zl: VisionCCiOSSDK.ZLPhotoBrowserWrapper<Self>.Type {
    get
    set
  }
}
extension VisionCCiOSSDK.ZLPhotoBrowserCompatibleValue {
  public var zl: VisionCCiOSSDK.ZLPhotoBrowserWrapper<Self> {
    get
    set
  }
}
extension UIKit.UIViewController : VisionCCiOSSDK.ZLPhotoBrowserCompatible {
}
extension UIKit.UIColor : VisionCCiOSSDK.ZLPhotoBrowserCompatible {
}
extension UIKit.UIImage : VisionCCiOSSDK.ZLPhotoBrowserCompatible {
}
extension CoreImage.CIImage : VisionCCiOSSDK.ZLPhotoBrowserCompatible {
}
extension Photos.PHAsset : VisionCCiOSSDK.ZLPhotoBrowserCompatible {
}
extension UIKit.UIFont : VisionCCiOSSDK.ZLPhotoBrowserCompatible {
}
extension UIKit.UIView : VisionCCiOSSDK.ZLPhotoBrowserCompatible {
}
extension UIKit.UIGraphicsImageRenderer : VisionCCiOSSDK.ZLPhotoBrowserCompatible {
}
extension Swift.Array : VisionCCiOSSDK.ZLPhotoBrowserCompatibleValue {
}
extension Swift.String : VisionCCiOSSDK.ZLPhotoBrowserCompatibleValue {
}
extension CoreFoundation.CGFloat : VisionCCiOSSDK.ZLPhotoBrowserCompatibleValue {
}
extension Swift.Bool : VisionCCiOSSDK.ZLPhotoBrowserCompatibleValue {
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func parentIQContainerViewController() -> UIKit.UIViewController?
  @objc @available(*, deprecated, message: "Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview.")
  @IBOutlet @_Concurrency.MainActor(unsafe) dynamic public var IQLayoutGuideConstraint: UIKit.NSLayoutConstraint? {
    @objc get
    @objc set(newValue)
  }
}
@available(iOSApplicationExtension, unavailable)
@objc final public class IQInvocation : ObjectiveC.NSObject {
  @objc weak final public var target: Swift.AnyObject?
  @objc final public var action: ObjectiveC.Selector
  @objc public init(_ target: Swift.AnyObject, _ action: ObjectiveC.Selector)
  @objc final public func invoke(from: Any)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQKeyboardManager {
  @objc final public func reloadInputViews()
}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQKeyboardManager {
  @objc final public var canGoPrevious: Swift.Bool {
    @objc get
  }
  @objc final public var canGoNext: Swift.Bool {
    @objc get
  }
  @discardableResult
  @objc final public func goPrevious() -> Swift.Bool
  @discardableResult
  @objc final public func goNext() -> Swift.Bool
}
public protocol SVGShapeElement : VisionCCiOSSDK.Fillable, VisionCCiOSSDK.Identifiable, VisionCCiOSSDK.SVGElement, VisionCCiOSSDK.Strokable, VisionCCiOSSDK.Stylable, VisionCCiOSSDK.Transformable {
  var svgLayer: QuartzCore.CAShapeLayer { get set }
}
@available(iOSApplicationExtension, unavailable)
@objc final public class IQBarButtonItemConfiguration : ObjectiveC.NSObject {
  @objc public init(barButtonSystemItem: UIKit.UIBarButtonItem.SystemItem, action: ObjectiveC.Selector)
  @objc public init(image: UIKit.UIImage, action: ObjectiveC.Selector)
  @objc public init(title: Swift.String, action: ObjectiveC.Selector)
  final public let barButtonSystemItem: UIKit.UIBarButtonItem.SystemItem?
  @objc final public let image: UIKit.UIImage?
  @objc final public let title: Swift.String?
  @objc final public let action: ObjectiveC.Selector?
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIImage {
  @objc public static func keyboardLeftImage() -> UIKit.UIImage?
  @objc public static func keyboardRightImage() -> UIKit.UIImage?
  @objc public static func keyboardUpImage() -> UIKit.UIImage?
  @objc public static func keyboardDownImage() -> UIKit.UIImage?
  @objc public static func keyboardPreviousImage() -> UIKit.UIImage?
  @objc public static func keyboardNextImage() -> UIKit.UIImage?
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var keyboardToolbar: VisionCCiOSSDK.IQToolbar {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldHideToolbarPlaceholder: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var toolbarPlaceholder: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var drawingToolbarPlaceholder: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addKeyboardToolbarWithTarget(target: Swift.AnyObject?, titleText: Swift.String?, rightBarButtonConfiguration: VisionCCiOSSDK.IQBarButtonItemConfiguration?, previousBarButtonConfiguration: VisionCCiOSSDK.IQBarButtonItemConfiguration? = nil, nextBarButtonConfiguration: VisionCCiOSSDK.IQBarButtonItemConfiguration? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
}
public struct ZLClipStatus {
}
public struct ZLAdjustStatus {
}
@objc public class ZLEditImageModel : ObjectiveC.NSObject {
  final public let drawPaths: [VisionCCiOSSDK.ZLDrawPath]
  final public let mosaicPaths: [VisionCCiOSSDK.ZLMosaicPath]
  final public let clipStatus: VisionCCiOSSDK.ZLClipStatus
  final public let adjustStatus: VisionCCiOSSDK.ZLAdjustStatus
  final public let selectFilter: VisionCCiOSSDK.ZLFilter?
  final public let stickers: [VisionCCiOSSDK.ZLBaseStickertState]
  final public let actions: [VisionCCiOSSDK.ZLEditorAction]
  public init(drawPaths: [VisionCCiOSSDK.ZLDrawPath], mosaicPaths: [VisionCCiOSSDK.ZLMosaicPath], clipStatus: VisionCCiOSSDK.ZLClipStatus, adjustStatus: VisionCCiOSSDK.ZLAdjustStatus, selectFilter: VisionCCiOSSDK.ZLFilter, stickers: [VisionCCiOSSDK.ZLBaseStickertState], actions: [VisionCCiOSSDK.ZLEditorAction])
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class ZLEditImageViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var drawColViewH: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var filterColViewH: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var adjustColViewH: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var cancelBtn: VisionCCiOSSDK.ZLEnlargeButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var mainScrollView: UIKit.UIScrollView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var topShadowView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var topShadowLayer: QuartzCore.CAGradientLayer {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bottomShadowView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var bottomShadowLayer: QuartzCore.CAGradientLayer {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var doneBtn: UIKit.UIButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var undoBtn: VisionCCiOSSDK.ZLEnlargeButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var redoBtn: VisionCCiOSSDK.ZLEnlargeButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var eraserBtn: VisionCCiOSSDK.ZLEnlargeButton {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var eraserBtnBgBlurView: UIKit.UIVisualEffectView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var eraserLineView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var eraserCircleView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var ashbinView: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var ashbinImgView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var drawLineWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var mosaicLineWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var editFinishBlock: ((UIKit.UIImage, VisionCCiOSSDK.ZLEditImageModel?) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var cancelEditBlock: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public class func showEditImageVC(parentVC: UIKit.UIViewController?, animate: Swift.Bool = false, image: UIKit.UIImage, editModel: VisionCCiOSSDK.ZLEditImageModel? = nil, cancel: (() -> Swift.Void)? = nil, completion: ((UIKit.UIImage, VisionCCiOSSDK.ZLEditImageModel?) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) public init(image: UIKit.UIImage, editModel: VisionCCiOSSDK.ZLEditImageModel? = nil)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
}
extension VisionCCiOSSDK.ZLEditImageViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension VisionCCiOSSDK.ZLEditImageViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
}
extension VisionCCiOSSDK.ZLEditImageViewController : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
public protocol SVGContainerElement : VisionCCiOSSDK.DelaysApplyingAttributes, VisionCCiOSSDK.Fillable, VisionCCiOSSDK.Identifiable, VisionCCiOSSDK.SVGElement, VisionCCiOSSDK.Strokable, VisionCCiOSSDK.Stylable, VisionCCiOSSDK.Transformable {
  var containerLayer: QuartzCore.CALayer { get set }
}
extension UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) public var header: VisionCCiOSSDK.JRefreshHeader? {
    get
    set(newHeader)
  }
  @_Concurrency.MainActor(unsafe) public var footer: VisionCCiOSSDK.JRefreshFooter? {
    get
    set(newFooter)
  }
}
extension Dispatch.DispatchQueue {
  open class func once(token: Swift.String, block: () -> Swift.Void)
}
public struct GlobalCgaModel : Swift.Codable {
  public var guest: VisionCCiOSSDK.GuestModel?
  public var channel: VisionCCiOSSDK.ChannelModel?
  public var shortcuts: [VisionCCiOSSDK.ShortcutsModel]?
  public var stickerPkgs: [VisionCCiOSSDK.StickerPkgsModel]?
  public init(guest: VisionCCiOSSDK.GuestModel? = nil, channel: VisionCCiOSSDK.ChannelModel? = nil, shortcuts: [VisionCCiOSSDK.ShortcutsModel]? = nil, stickerPkgs: [VisionCCiOSSDK.StickerPkgsModel]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GuestModel : Swift.Codable {
  public var tenantId: Swift.Int?
  public var enabledGuestSensitive: Swift.Bool?
  public var enabledGlobalAvatar: Swift.Bool?
  public var receptionistAvatarUrl: Swift.String?
  public var receptionistTagType: Swift.Int?
  public var companyName: Swift.String?
  public var companyLogoUrl: Swift.String?
  public var enabledGuestOfflineTime: Swift.Bool?
  public var guestOfflineTime: Swift.Int?
  public var guestReplyTimeout1: Swift.Int?
  public var guestReplyTimeout2: Swift.Int?
  public var enabledGuestSwitch: Swift.Bool?
  public var enabledReceptionistStatus: Swift.Bool?
  public var enabledGuestWithdrawal: Swift.Bool?
  public var messageWithdrawtime: Swift.Int?
  public var guestInputAssociate: Swift.Int?
  public init(tenantId: Swift.Int? = nil, enabledGuestSensitive: Swift.Bool? = nil, enabledGlobalAvatar: Swift.Bool? = nil, receptionistAvatarUrl: Swift.String? = nil, receptionistTagType: Swift.Int? = nil, companyName: Swift.String? = nil, companyLogoUrl: Swift.String? = nil, enabledGuestOfflineTime: Swift.Bool? = nil, guestOfflineTime: Swift.Int? = nil, guestReplyTimeout1: Swift.Int? = nil, guestReplyTimeout2: Swift.Int? = nil, enabledGuestSwitch: Swift.Bool? = nil, enabledReceptionistStatus: Swift.Bool? = nil, enabledGuestWithdrawal: Swift.Bool? = nil, messageWithdrawtime: Swift.Int? = nil, guestInputAssociate: Swift.Int? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ChannelModel : Swift.Codable {
  public var id: Swift.Int?
  public var tenant_id: Swift.Int?
  public var channel_id: Swift.Int?
  public var channel_app_id: Swift.Int?
  public var app_id: Swift.String?
  public var app_name: Swift.String?
  public var entry_code: Swift.String?
  public var entry_name: Swift.String?
  public var entry_skill_id: Swift.Int?
  public var enabled: Swift.Bool?
  public var enabled_entrance: Swift.Bool?
  public var enabled_reception: Swift.Bool?
  public var reception_robot_id: Swift.String?
  public var reception_robot_name: Swift.String?
  public var reception_robot_avatar_url: Swift.String?
  public var reception_robot_skill_id: Swift.Int?
  public var enabled_assistant: Swift.Bool?
  public var assistant_robot_id: Swift.String?
  public var assistant_robot_name: Swift.String?
  public var assistant_robot_skill_id: Swift.Int?
  public var entry_id: Swift.Int?
  public var deploy_info: Swift.String?
  public var docking_mode: Swift.Int?
  public var reception_ability: Swift.Int?
  public var voice_provider: Swift.Int?
  public var voice_app_id: Swift.String?
  public var auto_open_voice: Swift.Bool?
  public var video_provider: Swift.Int?
  public var video_app_id: Swift.String?
  public var auto_open_video: Swift.Bool?
  public init(id: Swift.Int? = nil, tenant_id: Swift.Int? = nil, channel_id: Swift.Int? = nil, channel_app_id: Swift.Int? = nil, app_id: Swift.String? = nil, app_name: Swift.String? = nil, entry_code: Swift.String? = nil, entry_name: Swift.String? = nil, entry_skill_id: Swift.Int? = nil, enabled: Swift.Bool? = nil, enabled_entrance: Swift.Bool? = nil, enabled_reception: Swift.Bool? = nil, reception_robot_id: Swift.String? = nil, reception_robot_name: Swift.String? = nil, reception_robot_avatar_url: Swift.String? = nil, reception_robot_skill_id: Swift.Int? = nil, enabled_assistant: Swift.Bool? = nil, assistant_robot_id: Swift.String? = nil, assistant_robot_name: Swift.String? = nil, assistant_robot_skill_id: Swift.Int? = nil, entry_id: Swift.Int? = nil, deploy_info: Swift.String? = nil, docking_mode: Swift.Int? = nil, reception_ability: Swift.Int? = nil, voice_provider: Swift.Int? = nil, voice_app_id: Swift.String? = nil, auto_open_voice: Swift.Bool? = nil, video_provider: Swift.Int? = nil, video_app_id: Swift.String? = nil, auto_open_video: Swift.Bool? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ShortcutsModel : Swift.Codable {
  public var title: Swift.String?
  public var shortcutType: Swift.Int?
  public var command: Swift.String?
  public init(title: Swift.String? = nil, shortcutType: Swift.Int? = nil, command: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StickerPkgsModel : Swift.Codable {
  public var groupId: Swift.Int
  public var title: Swift.String?
  public var icon: Swift.String?
  public var sort: Swift.Int?
  public var stickers: [VisionCCiOSSDK.StickersModel]?
  public init(groupId: Swift.Int, title: Swift.String? = nil, icon: Swift.String? = nil, sort: Swift.Int? = nil, stickers: [VisionCCiOSSDK.StickersModel]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StickersModel : Swift.Codable {
  public var stickerId: Swift.Int?
  public var groupId: Swift.Int?
  public var title: Swift.String?
  public var path: Swift.String?
  public var sort: Swift.Int
  public init(stickerId: Swift.Int? = nil, groupId: Swift.Int? = nil, title: Swift.String? = nil, path: Swift.String? = nil, sort: Swift.Int)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol ZLImageStickerContainerDelegate {
  @objc var selectImageBlock: ((UIKit.UIImage) -> Swift.Void)? { get set }
  @objc var hideBlock: (() -> Swift.Void)? { get set }
  @objc func show(in view: UIKit.UIView)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ZLEditImageConfiguration : ObjectiveC.NSObject {
  public var tools: [VisionCCiOSSDK.ZLEditImageConfiguration.EditTool] {
    get
    set
  }
  @objc public var tools_objc: [Swift.Int] {
    @objc get
    @objc set
  }
  @objc public var drawColors: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @objc public var defaultDrawColor: UIKit.UIColor
  @objc public var clipRatios: [VisionCCiOSSDK.ZLImageClipRatio] {
    @objc get
    @objc set
  }
  @objc public var textStickerTextColors: [UIKit.UIColor] {
    @objc get
    @objc set
  }
  @objc public var textStickerDefaultTextColor: UIKit.UIColor
  @objc public var textStickerDefaultFont: UIKit.UIFont?
  @objc public var filters: [VisionCCiOSSDK.ZLFilter] {
    @objc get
    @objc set
  }
  @objc public var imageStickerContainerView: (any UIKit.UIView & VisionCCiOSSDK.ZLImageStickerContainerDelegate)?
  public var adjustTools: [VisionCCiOSSDK.ZLEditImageConfiguration.AdjustTool] {
    get
    set
  }
  @objc public var adjustTools_objc: [Swift.Int] {
    @objc get
    @objc set
  }
  @objc public var impactFeedbackWhenAdjustSliderValueIsZero: Swift.Bool
  @objc public var impactFeedbackStyle: UIKit.UIImpactFeedbackGenerator.FeedbackStyle
  @objc public var dimClippedAreaDuringAdjustments: Swift.Bool
  @objc public var minimumZoomScale: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
extension VisionCCiOSSDK.ZLEditImageConfiguration {
  @objc public enum EditTool : Swift.Int, Swift.CaseIterable {
    case draw
    case clip
    case imageSticker
    case textSticker
    case mosaic
    case filter
    case adjust
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [VisionCCiOSSDK.ZLEditImageConfiguration.EditTool]
    public typealias RawValue = Swift.Int
    public static var allCases: [VisionCCiOSSDK.ZLEditImageConfiguration.EditTool] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum AdjustTool : Swift.Int, Swift.CaseIterable {
    case brightness
    case contrast
    case saturation
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [VisionCCiOSSDK.ZLEditImageConfiguration.AdjustTool]
    public typealias RawValue = Swift.Int
    public static var allCases: [VisionCCiOSSDK.ZLEditImageConfiguration.AdjustTool] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension VisionCCiOSSDK.ZLEditImageConfiguration {
  @discardableResult
  public func tools(_ tools: [VisionCCiOSSDK.ZLEditImageConfiguration.EditTool]) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @objc @discardableResult
  dynamic public func drawColors(_ colors: [UIKit.UIColor]) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @objc dynamic public func defaultDrawColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @objc @discardableResult
  dynamic public func clipRatios(_ ratios: [VisionCCiOSSDK.ZLImageClipRatio]) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @objc @discardableResult
  dynamic public func textStickerTextColors(_ colors: [UIKit.UIColor]) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @objc @discardableResult
  dynamic public func textStickerDefaultTextColor(_ color: UIKit.UIColor) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @objc @discardableResult
  dynamic public func textStickerDefaultFont(_ font: UIKit.UIFont?) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @objc @discardableResult
  dynamic public func filters(_ filters: [VisionCCiOSSDK.ZLFilter]) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @objc @discardableResult
  dynamic public func imageStickerContainerView(_ view: (any UIKit.UIView & VisionCCiOSSDK.ZLImageStickerContainerDelegate)?) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @discardableResult
  public func adjustTools(_ tools: [VisionCCiOSSDK.ZLEditImageConfiguration.AdjustTool]) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @objc @discardableResult
  dynamic public func impactFeedbackWhenAdjustSliderValueIsZero(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @objc @discardableResult
  dynamic public func impactFeedbackStyle(_ style: UIKit.UIImpactFeedbackGenerator.FeedbackStyle) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @objc @discardableResult
  dynamic public func dimClippedAreaDuringAdjustments(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLEditImageConfiguration
  @objc @discardableResult
  dynamic public func minimumZoomScale(_ value: CoreFoundation.CGFloat) -> VisionCCiOSSDK.ZLEditImageConfiguration
}
@objc public class ZLImageClipRatio : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc final public let whRatio: CoreFoundation.CGFloat
  @objc final public let isCircle: Swift.Bool
  @objc public init(title: Swift.String, whRatio: CoreFoundation.CGFloat, isCircle: Swift.Bool = false)
  @objc deinit
}
extension VisionCCiOSSDK.ZLImageClipRatio {
  @objc public static let custom: VisionCCiOSSDK.ZLImageClipRatio
  @objc public static let circle: VisionCCiOSSDK.ZLImageClipRatio
  @objc public static let wh1x1: VisionCCiOSSDK.ZLImageClipRatio
  @objc public static let wh3x4: VisionCCiOSSDK.ZLImageClipRatio
  @objc public static let wh4x3: VisionCCiOSSDK.ZLImageClipRatio
  @objc public static let wh2x3: VisionCCiOSSDK.ZLImageClipRatio
  @objc public static let wh3x2: VisionCCiOSSDK.ZLImageClipRatio
  @objc public static let wh9x16: VisionCCiOSSDK.ZLImageClipRatio
  @objc public static let wh16x9: VisionCCiOSSDK.ZLImageClipRatio
}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQKeyboardManager {
  @objc final public var enableDebugging: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc final public func registerAllNotifications()
  @objc final public func unregisterAllNotifications()
  public struct Static {
  }
}
extension VisionCCiOSSDK.NSXMLSVGParser : VisionCCiOSSDK.SVGParser {
}
@objc @_hasMissingDesignatedInitializers open class NSXMLSVGParser : Foundation.XMLParser, Foundation.XMLParserDelegate {
  public var completionBlock: ((VisionCCiOSSDK.SVGLayer) -> ())?
  public var supportedElements: VisionCCiOSSDK.SVGParserSupportedElements?
  open var containerLayer: VisionCCiOSSDK.SVGLayer
  convenience public init(SVGURL: Foundation.URL, supportedElements: VisionCCiOSSDK.SVGParserSupportedElements? = nil, completion: ((VisionCCiOSSDK.SVGLayer) -> ())? = nil)
  required public init(SVGData: Foundation.Data, supportedElements: VisionCCiOSSDK.SVGParserSupportedElements? = SVGParserSupportedElements.allSupportedElements, completion: ((VisionCCiOSSDK.SVGLayer) -> ())? = nil)
  public func startParsing()
  @objc open func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String])
  @objc open func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc public func parserDidEndDocument(_ parser: Foundation.XMLParser)
  @objc public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
public let kIQUseDefaultKeyboardDistance: CoreFoundation.CGFloat
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var keyboardDistanceFromTextField: CoreFoundation.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var ignoreSwitchingByNextPrevious: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var enableMode: VisionCCiOSSDK.IQEnableMode {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldResignOnTouchOutsideMode: VisionCCiOSSDK.IQEnableMode {
    @objc get
    @objc set(newValue)
  }
}
public func unown<T, U, V>(_ owner: T, _ method: @escaping (T) -> ((U) -> V)) -> (U) -> V where T : AnyObject
@objc public enum ZLLanguageType : Swift.Int, Swift.CaseIterable {
  case system
  case chineseSimplified
  case chineseTraditional
  case english
  case japanese
  case french
  case german
  case russian
  case vietnamese
  case korean
  case malay
  case italian
  case indonesian
  case portuguese
  case spanish
  case turkish
  case arabic
  case dutch
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [VisionCCiOSSDK.ZLLanguageType]
  public typealias RawValue = Swift.Int
  public static var allCases: [VisionCCiOSSDK.ZLLanguageType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct ZLLocalLanguageKey : Swift.Hashable {
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public static let previewCamera: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let previewCameraRecord: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let previewAlbum: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let cancel: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let noPhotoTips: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let hudLoading: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let hudProcessing: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let done: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let ok: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let timeout: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let noPhotoLibratyAuthority: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let noCameraAuthority: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let noMicrophoneAuthority: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let cameraUnavailable: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let keepRecording: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let gotoSettings: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let photo: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let originalPhoto: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let originalTotalSize: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let back: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let edit: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let editFinish: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let revert: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let brightness: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let contrast: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let saturation: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let preview: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let save: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let saveImageError: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let saveVideoError: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let exceededMaxSelectCount: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let exceededMaxVideoSelectCount: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let lessThanMinVideoSelectCount: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let longerThanMaxVideoDuration: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let shorterThanMinVideoDuration: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let largerThanMaxVideoDataSize: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let smallerThanMinVideoDataSize: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let iCloudVideoLoadFaild: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let imageLoadFailed: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let customCameraTips: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let customCameraTakePhotoTips: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let customCameraRecordVideoTips: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let minRecordTimeTips: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let cameraRoll: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let panoramas: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let videos: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let favorites: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let timelapses: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let recentlyAdded: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let bursts: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let slomoVideos: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let selfPortraits: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let screenshots: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let depthEffect: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let livePhotos: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let animated: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let myPhotoStream: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let noTitleAlbumListPlaceholder: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let unableToAccessAllPhotos: VisionCCiOSSDK.ZLLocalLanguageKey
  public static let textStickerRemoveTips: VisionCCiOSSDK.ZLLocalLanguageKey
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: VisionCCiOSSDK.ZLLocalLanguageKey, b: VisionCCiOSSDK.ZLLocalLanguageKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIScrollView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreScrollingAdjustment: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreContentInsetAdjustment: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldRestoreScrollViewContentOffset: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ZLPhotoConfiguration : ObjectiveC.NSObject {
  public typealias Second = Swift.Int
  public typealias KBUnit = CoreFoundation.CGFloat
  @objc public class func `default`() -> VisionCCiOSSDK.ZLPhotoConfiguration
  @objc public class func resetConfiguration()
  @objc public var maxSelectCount: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var maxVideoSelectCount: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var minVideoSelectCount: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var allowMixSelect: Swift.Bool
  @objc public var maxPreviewCount: Swift.Int
  @objc public var allowSelectImage: Swift.Bool
  @objc public var allowSelectVideo: Swift.Bool
  @objc public var downloadVideoBeforeSelecting: Swift.Bool
  @objc public var allowSelectGif: Swift.Bool
  @objc public var allowSelectLivePhoto: Swift.Bool
  @objc public var allowTakePhotoInLibrary: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var callbackDirectlyAfterTakingPhoto: Swift.Bool
  @objc public var allowEditImage: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var allowEditVideo: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var editAfterSelectThumbnailImage: Swift.Bool
  @objc public var cropVideoAfterSelectThumbnail: Swift.Bool
  @objc public var showClipDirectlyIfOnlyHasClipTool: Swift.Bool
  @objc public var saveNewImageAfterEdit: Swift.Bool
  @objc public var allowSlideSelect: Swift.Bool
  @objc public var autoScrollWhenSlideSelectIsActive: Swift.Bool
  @objc public var autoScrollMaxSpeed: CoreFoundation.CGFloat
  @objc public var allowDragSelect: Swift.Bool
  @objc public var allowSelectOriginal: Swift.Bool
  @objc public var alwaysRequestOriginal: Swift.Bool
  @objc public var showOriginalSizeWhenSelectOriginal: Swift.Bool
  @objc public var allowPreviewPhotos: Swift.Bool
  @objc public var showPreviewButtonInAlbum: Swift.Bool
  @objc public var showSelectCountOnDoneBtn: Swift.Bool
  @objc public var showSelectBtnWhenSingleSelect: Swift.Bool
  @objc public var showSelectedIndex: Swift.Bool
  @objc public var maxEditVideoTime: Swift.Int
  @objc public var maxSelectVideoDuration: Swift.Int
  @objc public var minSelectVideoDuration: Swift.Int
  @objc public var maxSelectVideoDataSize: VisionCCiOSSDK.ZLPhotoConfiguration.KBUnit
  @objc public var minSelectVideoDataSize: VisionCCiOSSDK.ZLPhotoConfiguration.KBUnit
  @objc public var editImageConfiguration: VisionCCiOSSDK.ZLEditImageConfiguration
  @objc public var useCustomCamera: Swift.Bool
  @objc public var cameraConfiguration: VisionCCiOSSDK.ZLCameraConfiguration
  @objc public var canSelectAsset: ((Photos.PHAsset) -> Swift.Bool)?
  @objc public var didSelectAsset: ((Photos.PHAsset) -> Swift.Void)?
  @objc public var didDeselectAsset: ((Photos.PHAsset) -> Swift.Void)?
  @objc public var maxFrameCountForGIF: Swift.Int
  @objc public var gifPlayBlock: ((UIKit.UIImageView, Foundation.Data, [Swift.AnyHashable : Any]?) -> Swift.Void)?
  @objc public var pauseGIFBlock: ((UIKit.UIImageView) -> Swift.Void)?
  @objc public var resumeGIFBlock: ((UIKit.UIImageView) -> Swift.Void)?
  @objc public var noAuthorityCallback: ((VisionCCiOSSDK.ZLNoAuthorityType) -> Swift.Void)?
  @objc public var operateBeforeDoneAction: ((UIKit.UIViewController, @escaping () -> Swift.Void) -> Swift.Void)?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum ZLNoAuthorityType : Swift.Int {
  case library
  case camera
  case microphone
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SessionStatus : Swift.Int {
  case isInvalid
  case isNotAccess
  case isQueuing
  case isTransferring
  case isSuccess
  case isAllocated
  case isTransferred
  case isTimeOut
  case isEnded
  case isTerminated
  case isOffline
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SessionType : Swift.Int {
  case blackList
  case system
  case ai
  case original
  case transfer
  case queuing
  case leavingMessage
  case claim
  case invitation
  case overflow
  case offline
  case epWeChat
  case videoChat
  case reservation
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct GuestqueuepromptModel : Swift.Codable {
  public var isQueuing: Swift.Bool?
  public var promptWord: Swift.String?
  public var queueNumber: Swift.Int?
  public var queueWaitTime: Swift.Int?
  public init(isQueuing: Swift.Bool? = nil, promptWord: Swift.String? = nil, queueNumber: Swift.Int? = nil, queueWaitTime: Swift.Int? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GuestSessionModel : Swift.Codable {
  public var channel: Swift.Int?
  public var customerId: Swift.String?
  public var endTime: Swift.Double?
  public var entryId: Swift.Int64?
  public var parentId: Swift.String?
  public var receptionistId: Swift.String?
  public var receptionistName: Swift.String?
  public var satisfactionConfig: VisionCCiOSSDK.SatisfactionConfig?
  public var sessionId: Swift.String?
  public var eId: Swift.Int64?
  public var sessionStatus: Swift.Int?
  public var sessionType: Swift.Int?
  public var socketId: Swift.String?
  public var startTime: Swift.Double?
  public var traceId: Swift.Int64?
  public init(channel: Swift.Int? = nil, customerId: Swift.String? = nil, endTime: Swift.Double? = nil, entryId: Swift.Int64? = nil, parentId: Swift.String? = nil, receptionistId: Swift.String? = nil, receptionistName: Swift.String? = nil, satisfactionConfig: VisionCCiOSSDK.SatisfactionConfig? = nil, sessionId: Swift.String? = nil, eId: Swift.Int64? = nil, sessionStatus: Swift.Int? = nil, sessionType: Swift.Int? = nil, socketId: Swift.String? = nil, startTime: Swift.Double? = nil, traceId: Swift.Int64? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SatisfactionConfig : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserMappingModel : Swift.Codable, Swift.Equatable {
  public var identity_id: Swift.String?
  public var visitor_name: Swift.String?
  public var phone: Swift.String?
  public var email: Swift.String?
  public var deviceId: Swift.String?
  public var app_id: Swift.String?
  public var app_name: Swift.String?
  public var env_name: Swift.String?
  public init(identity_id: Swift.String? = nil, visitor_name: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil, deviceId: Swift.String? = nil, app_id: Swift.String? = nil, app_name: Swift.String? = nil, env_name: Swift.String? = nil)
  public static func == (lhs: VisionCCiOSSDK.UserMappingModel, rhs: VisionCCiOSSDK.UserMappingModel) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQKeyboardManager {
  public typealias SizeBlock = (_ size: CoreFoundation.CGSize) -> Swift.Void
  @objc final public func registerKeyboardSizeChange(identifier: Swift.AnyHashable, sizeHandler: @escaping VisionCCiOSSDK.IQKeyboardManager.SizeBlock)
  @objc final public func unregisterKeyboardSizeChange(identifier: Swift.AnyHashable)
  @objc final public var keyboardShowing: Swift.Bool {
    @objc get
  }
  @objc final public var keyboardFrame: CoreFoundation.CGRect {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ZLCameraConfiguration : ObjectiveC.NSObject {
  @objc public var allowTakePhoto: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var allowRecordVideo: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var minRecordDuration: VisionCCiOSSDK.ZLPhotoConfiguration.Second {
    @objc get
    @objc set
  }
  @objc public var maxRecordDuration: VisionCCiOSSDK.ZLPhotoConfiguration.Second {
    @objc get
    @objc set
  }
  @objc public var sessionPreset: VisionCCiOSSDK.ZLCameraConfiguration.CaptureSessionPreset
  @objc public var focusMode: VisionCCiOSSDK.ZLCameraConfiguration.FocusMode
  @objc public var exposureMode: VisionCCiOSSDK.ZLCameraConfiguration.ExposureMode
  @objc public var showFlashSwitch: Swift.Bool
  @objc public var allowSwitchCamera: Swift.Bool
  @objc public var videoExportType: VisionCCiOSSDK.ZLCameraConfiguration.VideoExportType
  @objc public var devicePosition: VisionCCiOSSDK.ZLCameraConfiguration.DevicePosition
  @objc @available(iOS 11.0, *)
  public var videoCodecType: AVFoundation.AVVideoCodecType {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
extension VisionCCiOSSDK.ZLCameraConfiguration {
  @objc public enum CaptureSessionPreset : Swift.Int {
    case cif352x288
    case vga640x480
    case hd1280x720
    case hd1920x1080
    case hd4K3840x2160
    case photo
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum FocusMode : Swift.Int {
    case autoFocus
    case continuousAutoFocus
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum ExposureMode : Swift.Int {
    case autoExpose
    case continuousAutoExposure
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum VideoExportType : Swift.Int {
    case mov
    case mp4
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum DevicePosition : Swift.Int {
    case back
    case front
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension VisionCCiOSSDK.ZLCameraConfiguration {
  @objc @discardableResult
  dynamic public func allowTakePhoto(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLCameraConfiguration
  @objc @discardableResult
  dynamic public func allowRecordVideo(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLCameraConfiguration
  @objc @discardableResult
  dynamic public func minRecordDuration(_ duration: VisionCCiOSSDK.ZLPhotoConfiguration.Second) -> VisionCCiOSSDK.ZLCameraConfiguration
  @objc @discardableResult
  dynamic public func maxRecordDuration(_ duration: VisionCCiOSSDK.ZLPhotoConfiguration.Second) -> VisionCCiOSSDK.ZLCameraConfiguration
  @objc @discardableResult
  dynamic public func sessionPreset(_ sessionPreset: VisionCCiOSSDK.ZLCameraConfiguration.CaptureSessionPreset) -> VisionCCiOSSDK.ZLCameraConfiguration
  @objc @discardableResult
  dynamic public func focusMode(_ mode: VisionCCiOSSDK.ZLCameraConfiguration.FocusMode) -> VisionCCiOSSDK.ZLCameraConfiguration
  @objc @discardableResult
  dynamic public func exposureMode(_ mode: VisionCCiOSSDK.ZLCameraConfiguration.ExposureMode) -> VisionCCiOSSDK.ZLCameraConfiguration
  @objc @discardableResult
  dynamic public func showFlashSwitch(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLCameraConfiguration
  @objc @discardableResult
  dynamic public func allowSwitchCamera(_ value: Swift.Bool) -> VisionCCiOSSDK.ZLCameraConfiguration
  @objc @discardableResult
  dynamic public func videoExportType(_ type: VisionCCiOSSDK.ZLCameraConfiguration.VideoExportType) -> VisionCCiOSSDK.ZLCameraConfiguration
  @objc @discardableResult
  dynamic public func devicePosition(_ position: VisionCCiOSSDK.ZLCameraConfiguration.DevicePosition) -> VisionCCiOSSDK.ZLCameraConfiguration
  @objc @available(iOS 11.0, *)
  @discardableResult
  dynamic public func videoCodecType(_ type: AVFoundation.AVVideoCodecType) -> VisionCCiOSSDK.ZLCameraConfiguration
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class JRefreshNormalHeader : VisionCCiOSSDK.JRefreshStateHeader {
  @_Concurrency.MainActor(unsafe) public var activityIndicatorViewStyle: UIKit.UIActivityIndicatorView.Style {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var arrowView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var loadingView: UIKit.UIActivityIndicatorView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var arrowViewNeedCircle: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var circleLayer: QuartzCore.CAShapeLayer {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var pullingPercent: CoreFoundation.CGFloat? {
    get
    set(newPullingPercent)
  }
  @_Concurrency.MainActor(unsafe) override open var state: VisionCCiOSSDK.JRefreshState {
    get
    set(newState)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension VisionCCiOSSDK.JRefreshNormalHeader {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeSubviews()
}
public protocol DelaysApplyingAttributes {
  var delayedAttributes: [Swift.String : Swift.String] { get set }
}
extension VisionCCiOSSDK.DelaysApplyingAttributes where Self : VisionCCiOSSDK.SVGElement {
  public mutating func applyDelayedAttributes()
}
public enum ZLInputTextStyle {
  case normal
  case bg
  public static func == (a: VisionCCiOSSDK.ZLInputTextStyle, b: VisionCCiOSSDK.ZLInputTextStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class ZLDrawPath : ObjectiveC.NSObject {
  @objc deinit
}
extension VisionCCiOSSDK.ZLDrawPath {
  public static func == (lhs: VisionCCiOSSDK.ZLDrawPath, rhs: VisionCCiOSSDK.ZLDrawPath) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers public class ZLMosaicPath : ObjectiveC.NSObject {
  @objc deinit
}
public protocol Fillable {
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQBarButtonItem : UIKit.UIBarButtonItem {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector?)
  @objc @_Concurrency.MainActor(unsafe) open var invocation: VisionCCiOSSDK.IQInvocation?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ZLEnlargeButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public var enlargeInsets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) public var enlargeInset: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol CCKFApiConversationDelegate {
  func unReadMessageCountEvent(count: Swift.Int)
  func shortCutEvent(model: VisionCCiOSSDK.ShortcutsModel)
  func messageEvent(model: VisionCCiOSSDK.MessageModel)
  func trackEvent(name: Swift.String, attributes: [Swift.String : Swift.String])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CCKFApi : VisionCCiOSSDK.BaseChatVC {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateViewConstraints()
  @_Concurrency.MainActor(unsafe) public var guestPrivacyAcceptBlock: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VisionCCiOSSDK.CCKFApi {
  @_Concurrency.MainActor(unsafe) public static func getSDKVersion(isShort: Swift.Bool = false) -> Swift.String
  @_Concurrency.MainActor(unsafe) public func startSession(host: Swift.String, entryId: Swift.String, appkey: Swift.String, userMappings: VisionCCiOSSDK.UserMappingModel, callBack: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func show()
  @_Concurrency.MainActor(unsafe) public func close()
  @_Concurrency.MainActor(unsafe) public static func registerNetUser(RequestCallback: @escaping ((Swift.Bool, Any?) -> Swift.Void))
  @_Concurrency.MainActor(unsafe) public func sendMessage(msgType: Swift.Int, msgBody: VisionCCiOSSDK.MessageBody)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class JRefreshHeader : VisionCCiOSSDK.JRefreshComponent {
  @_Concurrency.MainActor(unsafe) public class func headerWithRefreshingBlock(_ refreshingBlock: VisionCCiOSSDK.JRefreshHeader.Block) -> VisionCCiOSSDK.JRefreshHeader
  @_Concurrency.MainActor(unsafe) public var ignoredScrollViewContentInsetTop: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) override open var state: VisionCCiOSSDK.JRefreshState {
    get
    set(newState)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension VisionCCiOSSDK.JRefreshHeader {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func scrollViewContentOffsetDidChange(_ change: [Foundation.NSKeyValueChangeKey : Any]?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class JRefreshAutoGifFooter : VisionCCiOSSDK.JRefreshAutoStateFooter {
  @_Concurrency.MainActor(unsafe) override open var state: VisionCCiOSSDK.JRefreshState {
    get
    set(newState)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension VisionCCiOSSDK.JRefreshAutoGifFooter {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeSubviews()
}
extension VisionCCiOSSDK.JRefreshAutoGifFooter {
  @_Concurrency.MainActor(unsafe) public func setImages(_ images: Swift.Array<UIKit.UIImage>, _ duration: Foundation.TimeInterval, _ state: VisionCCiOSSDK.JRefreshState)
  @_Concurrency.MainActor(unsafe) public func setImages(_ images: Swift.Array<UIKit.UIImage>, _ state: VisionCCiOSSDK.JRefreshState)
}
public protocol HasDisposeBag : AnyObject {
  var disposeBag: RxSwift.DisposeBag { get set }
}
extension VisionCCiOSSDK.HasDisposeBag {
  public var disposeBag: RxSwift.DisposeBag {
    get
    set
  }
}
extension UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) public var inset: UIKit.UIEdgeInsets {
    get
  }
  @_Concurrency.MainActor(unsafe) public var insetTop: CoreFoundation.CGFloat {
    get
    set(newTop)
  }
  @_Concurrency.MainActor(unsafe) public var insetRight: CoreFoundation.CGFloat {
    get
    set(newRight)
  }
  @_Concurrency.MainActor(unsafe) public var insetBottom: CoreFoundation.CGFloat {
    get
    set(newBottom)
  }
  @_Concurrency.MainActor(unsafe) public var insetLeft: CoreFoundation.CGFloat {
    get
    set(newLeft)
  }
  @_Concurrency.MainActor(unsafe) public var offsetX: CoreFoundation.CGFloat {
    get
    set(newOffsetX)
  }
  @_Concurrency.MainActor(unsafe) public var offsetY: CoreFoundation.CGFloat {
    get
    set(newOffsetY)
  }
  @_Concurrency.MainActor(unsafe) public var contentW: CoreFoundation.CGFloat {
    get
    set(newContentW)
  }
  @_Concurrency.MainActor(unsafe) public var contentH: CoreFoundation.CGFloat {
    get
    set(newContentH)
  }
}
extension QuartzCore.CALayer {
  open func applyOnSublayers<T>(ofType: T.Type, closure: (T) -> ()) where T : QuartzCore.CALayer
  public func sublayers<T, U>(in layer: T) -> [U] where T : QuartzCore.CALayer
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class JRefreshFooter : VisionCCiOSSDK.JRefreshComponent {
  @_Concurrency.MainActor(unsafe) public var ignoredScrollViewContentInsetBottom: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public class func footerWithRefreshingBlock(_ refreshingBlock: VisionCCiOSSDK.JRefreshFooter.Block) -> VisionCCiOSSDK.JRefreshFooter
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension VisionCCiOSSDK.JRefreshFooter {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
}
extension VisionCCiOSSDK.JRefreshFooter {
  @_Concurrency.MainActor(unsafe) public func endRefreshingWithNoMoreData()
  @_Concurrency.MainActor(unsafe) public func resetNoMoreData()
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public class func J_lable() -> UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public func textWidth() -> CoreFoundation.CGFloat
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc final public class IQKeyboardReturnKeyHandler : ObjectiveC.NSObject {
  @objc weak final public var delegate: (any UIKit.UITextFieldDelegate & UIKit.UITextViewDelegate)?
  @objc final public var lastTextFieldReturnKeyType: UIKit.UIReturnKeyType {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(controller: UIKit.UIViewController)
  @objc deinit
  @objc final public func addTextFieldView(_ view: UIKit.UIView)
  @objc final public func removeTextFieldView(_ view: UIKit.UIView)
  @objc final public func addResponderFromView(_ view: UIKit.UIView)
  @objc final public func removeResponderFromView(_ view: UIKit.UIView)
}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQKeyboardReturnKeyHandler : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor(unsafe) @objc final public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQKeyboardReturnKeyHandler : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS 16.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, editMenuForTextIn range: Foundation.NSRange, suggestedActions: [UIKit.UIMenuElement]) -> UIKit.UIMenu?
  @available(iOS 16.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, willPresentEditMenuWith animator: any UIKit.UIEditMenuInteractionAnimating)
  @available(iOS 16.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, willDismissEditMenuWith animator: any UIKit.UIEditMenuInteractionAnimating)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ZLPhotoPreviewSheet : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var selectImageBlock: (([VisionCCiOSSDK.ZLResultModel], Swift.Bool) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var selectImageRequestErrorBlock: (([Photos.PHAsset], [Swift.Int]) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var cancelBlock: (() -> Swift.Void)?
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) convenience public init(selectedAssets: [Photos.PHAsset]? = nil)
  @objc @_Concurrency.MainActor(unsafe) convenience public init(results: [VisionCCiOSSDK.ZLResultModel]? = nil)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func showPreview(animate: Swift.Bool = true, sender: UIKit.UIViewController)
  @objc @_Concurrency.MainActor(unsafe) public func showPhotoLibrary(sender: UIKit.UIViewController)
  @objc @_Concurrency.MainActor(unsafe) public func previewAssets(sender: UIKit.UIViewController, assets: [Photos.PHAsset], index: Swift.Int, isOriginal: Swift.Bool, showBottomViewAndSelectBtn: Swift.Bool = true)
}
extension VisionCCiOSSDK.ZLPhotoPreviewSheet : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension VisionCCiOSSDK.ZLPhotoPreviewSheet : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension VisionCCiOSSDK.ZLPhotoPreviewSheet : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
extension VisionCCiOSSDK.ZLPhotoPreviewSheet : Photos.PHPhotoLibraryChangeObserver {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func photoLibraryDidChange(_ changeInstance: Photos.PHChange)
}
extension QuartzCore.CAShapeLayer {
  convenience public init(pathString: Swift.String)
}
public protocol Transformable {
  var layerToTransform: QuartzCore.CALayer { get }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ZLProgressHUD : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var timeoutBlock: (() -> Swift.Void)?
  @objc deinit
  @_Concurrency.MainActor(unsafe) public init(style: VisionCCiOSSDK.ZLProgressHUD.Style)
  @_Concurrency.MainActor(unsafe) public func show(toast: VisionCCiOSSDK.ZLProgressHUD.Toast = .loading, in view: UIKit.UIView? = UIApplication.shared.keyWindow, timeout: Foundation.TimeInterval = 100)
  @objc @_Concurrency.MainActor(unsafe) public func hide()
}
extension VisionCCiOSSDK.ZLProgressHUD {
  @_Concurrency.MainActor(unsafe) public class func show(toast: VisionCCiOSSDK.ZLProgressHUD.Toast = .loading, in view: UIKit.UIView? = UIApplication.shared.keyWindow, timeout: Foundation.TimeInterval = 100) -> VisionCCiOSSDK.ZLProgressHUD
}
extension VisionCCiOSSDK.ZLProgressHUD {
  @objc(ZLProgressHUDStyle) public enum Style : Swift.Int {
    case light
    case lightBlur
    case dark
    case darkBlur
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Toast {
    case loading
    case processing
    case custome(Swift.String)
  }
}
public typealias ZLFilterApplierType = (_ image: UIKit.UIImage) -> UIKit.UIImage
@objc public enum ZLFilterType : Swift.Int {
  case normal
  case chrome
  case fade
  case instant
  case process
  case transfer
  case tone
  case linear
  case sepia
  case mono
  case noir
  case tonal
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class ZLFilter : ObjectiveC.NSObject {
  public var name: Swift.String
  @objc public init(name: Swift.String, filterType: VisionCCiOSSDK.ZLFilterType)
  @objc public init(name: Swift.String, applier: VisionCCiOSSDK.ZLFilterApplierType?)
  @objc deinit
}
extension VisionCCiOSSDK.ZLFilter {
  @objc public static let all: [VisionCCiOSSDK.ZLFilter]
  @objc public static let normal: VisionCCiOSSDK.ZLFilter
  @objc public static let clarendon: VisionCCiOSSDK.ZLFilter
  @objc public static let nashville: VisionCCiOSSDK.ZLFilter
  @objc public static let apply1977: VisionCCiOSSDK.ZLFilter
  @objc public static let toaster: VisionCCiOSSDK.ZLFilter
  @objc public static let chrome: VisionCCiOSSDK.ZLFilter
  @objc public static let fade: VisionCCiOSSDK.ZLFilter
  @objc public static let instant: VisionCCiOSSDK.ZLFilter
  @objc public static let process: VisionCCiOSSDK.ZLFilter
  @objc public static let transfer: VisionCCiOSSDK.ZLFilter
  @objc public static let tone: VisionCCiOSSDK.ZLFilter
  @objc public static let linear: VisionCCiOSSDK.ZLFilter
  @objc public static let sepia: VisionCCiOSSDK.ZLFilter
  @objc public static let mono: VisionCCiOSSDK.ZLFilter
  @objc public static let noir: VisionCCiOSSDK.ZLFilter
  @objc public static let tonal: VisionCCiOSSDK.ZLFilter
}
extension Swift.Dictionary {
  public mutating func add(_ dictionary: [Key : Value])
}
extension Foundation.Bundle {
  public class func refreshBunle() -> Foundation.Bundle
  public class func arrowImage() -> UIKit.UIImage
  public class func localizedString(_ key: Swift.String) -> Swift.String
  public class func localizedString(_ key: Swift.String, _ value: Swift.String?) -> Swift.String
}
public protocol Stylable {
}
public protocol SVGElement {
  static var elementName: Swift.String { get }
  var supportedAttributes: [Swift.String : (Swift.String) -> ()] { get set }
  func didProcessElement(in container: (any VisionCCiOSSDK.SVGContainerElement)?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ZLPhotoManager : ObjectiveC.NSObject {
  @objc public class func saveImageToAlbum(image: UIKit.UIImage, completion: ((Swift.Bool, Photos.PHAsset?) -> Swift.Void)?)
  @objc public class func saveVideoToAlbum(url: Foundation.URL, completion: ((Swift.Bool, Photos.PHAsset?) -> Swift.Void)?)
  @objc public class func fetchPhoto(in result: Photos.PHFetchResult<Photos.PHAsset>, ascending: Swift.Bool, allowSelectImage: Swift.Bool, allowSelectVideo: Swift.Bool, limitCount: Swift.Int = .max) -> [VisionCCiOSSDK.ZLPhotoModel]
  @objc public class func getPhotoAlbumList(ascending: Swift.Bool, allowSelectImage: Swift.Bool, allowSelectVideo: Swift.Bool, completion: ([VisionCCiOSSDK.ZLAlbumListModel]) -> Swift.Void)
  @objc public class func getCameraRollAlbum(allowSelectImage: Swift.Bool, allowSelectVideo: Swift.Bool, completion: @escaping (VisionCCiOSSDK.ZLAlbumListModel) -> Swift.Void)
  @objc @discardableResult
  public class func fetchImage(for asset: Photos.PHAsset, size: CoreFoundation.CGSize, progress: ((CoreFoundation.CGFloat, (any Swift.Error)?, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>, [Swift.AnyHashable : Any]?) -> Swift.Void)? = nil, completion: @escaping (UIKit.UIImage?, Swift.Bool) -> Swift.Void) -> Photos.PHImageRequestID
  @objc @discardableResult
  public class func fetchOriginalImage(for asset: Photos.PHAsset, progress: ((CoreFoundation.CGFloat, (any Swift.Error)?, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>, [Swift.AnyHashable : Any]?) -> Swift.Void)? = nil, completion: @escaping (UIKit.UIImage?, Swift.Bool) -> Swift.Void) -> Photos.PHImageRequestID
  @objc @discardableResult
  public class func fetchOriginalImageData(for asset: Photos.PHAsset, progress: ((CoreFoundation.CGFloat, (any Swift.Error)?, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>, [Swift.AnyHashable : Any]?) -> Swift.Void)? = nil, completion: @escaping (Foundation.Data, [Swift.AnyHashable : Any]?, Swift.Bool) -> Swift.Void) -> Photos.PHImageRequestID
  @objc public class func fetchLivePhoto(for asset: Photos.PHAsset, completion: @escaping (Photos.PHLivePhoto?, [Swift.AnyHashable : Any]?, Swift.Bool) -> Swift.Void) -> Photos.PHImageRequestID
  @objc public class func fetchVideo(for asset: Photos.PHAsset, progress: ((CoreFoundation.CGFloat, (any Swift.Error)?, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>, [Swift.AnyHashable : Any]?) -> Swift.Void)? = nil, completion: @escaping (AVFoundation.AVPlayerItem?, [Swift.AnyHashable : Any]?, Swift.Bool) -> Swift.Void) -> Photos.PHImageRequestID
  @objc public class func fetchAVAsset(forVideo asset: Photos.PHAsset, completion: @escaping (AVFoundation.AVAsset?, [Swift.AnyHashable : Any]?) -> Swift.Void) -> Photos.PHImageRequestID
  public class func fetchAssetSize(for asset: Photos.PHAsset) -> VisionCCiOSSDK.ZLPhotoConfiguration.KBUnit?
  @objc public class func fetchAssetFilePath(for asset: Photos.PHAsset, completion: @escaping (Swift.String?) -> Swift.Void)
  @objc public class func saveAsset(_ asset: Photos.PHAsset, toFile fileUrl: Foundation.URL, completion: @escaping (((any Swift.Error)?) -> Swift.Void))
  @objc override dynamic public init()
  @objc deinit
}
extension VisionCCiOSSDK.ZLPhotoManager {
  @objc dynamic public class func hasPhotoLibratyAuthority() -> Swift.Bool
  @objc dynamic public class func hasCameraAuthority() -> Swift.Bool
  @objc dynamic public class func hasMicrophoneAuthority() -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQToolbar : UIKit.UIToolbar, UIKit.UIInputViewAudioFeedback {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open var previousBarButton: VisionCCiOSSDK.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var nextBarButton: VisionCCiOSSDK.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleBarButton: VisionCCiOSSDK.IQTitleBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var doneBarButton: VisionCCiOSSDK.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var fixedSpaceBarButton: VisionCCiOSSDK.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc open var enableInputClicksWhenVisible: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BaseChatVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var conversionDelegate: (any VisionCCiOSSDK.CCKFApiConversationDelegate)?
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateViewConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension VisionCCiOSSDK.BaseChatVC : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension VisionCCiOSSDK.BaseChatVC : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
extension VisionCCiOSSDK.BaseChatVC : UIKit.UIDocumentInteractionControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentInteractionController(_ controller: UIKit.UIDocumentInteractionController, willBeginSendingToApplication application: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentInteractionController(_ controller: UIKit.UIDocumentInteractionController, didEndSendingToApplication application: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentInteractionControllerDidDismissOpenInMenu(_ controller: UIKit.UIDocumentInteractionController)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentInteractionControllerViewControllerForPreview(_ controller: UIKit.UIDocumentInteractionController) -> UIKit.UIViewController
}
@objc @_hasMissingDesignatedInitializers public class AnyCodable : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var value: Any
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension VisionCCiOSSDK.AnyCodable : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQAutoToolbarManageBehaviour : Swift.Int {
  case bySubviews
  case byTag
  case byPosition
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQPreviousNextDisplayMode : Swift.Int {
  case `default`
  case alwaysHide
  case alwaysShow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQEnableMode : Swift.Int {
  case `default`
  case enabled
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQPreviousNextView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class ZLAlbumListModel : ObjectiveC.NSObject {
  final public let title: Swift.String
  public var count: Swift.Int {
    get
  }
  public var result: Photos.PHFetchResult<Photos.PHAsset>
  final public let collection: Photos.PHAssetCollection
  final public let option: Photos.PHFetchOptions
  final public let isCameraRoll: Swift.Bool
  public var headImageAsset: Photos.PHAsset? {
    get
  }
  public var models: [VisionCCiOSSDK.ZLPhotoModel]
  public init(title: Swift.String, result: Photos.PHFetchResult<Photos.PHAsset>, collection: Photos.PHAssetCollection, option: Photos.PHFetchOptions, isCameraRoll: Swift.Bool)
  public func refetchPhotos()
  @objc deinit
}
@objc public class ZLResultModel : ObjectiveC.NSObject {
  @objc final public let asset: Photos.PHAsset
  @objc final public let image: UIKit.UIImage
  @objc final public let isEdited: Swift.Bool
  @objc final public let editModel: VisionCCiOSSDK.ZLEditImageModel?
  @objc final public let index: Swift.Int
  @objc public init(asset: Photos.PHAsset, image: UIKit.UIImage, isEdited: Swift.Bool, editModel: VisionCCiOSSDK.ZLEditImageModel? = nil, index: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@objc final public class IQKeyboardManager : ObjectiveC.NSObject {
  @objc public static let shared: VisionCCiOSSDK.IQKeyboardManager
  @objc final public var enable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var keyboardDistanceFromTextField: CoreFoundation.CGFloat
  @objc final public var enableAutoToolbar: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var toolbarManageBehaviour: VisionCCiOSSDK.IQAutoToolbarManageBehaviour
  @objc final public var shouldToolbarUsesTextFieldTintColor: Swift.Bool
  @objc final public var toolbarTintColor: UIKit.UIColor?
  @objc final public var toolbarBarTintColor: UIKit.UIColor?
  @objc final public var previousNextDisplayMode: VisionCCiOSSDK.IQPreviousNextDisplayMode
  @objc final public var toolbarPreviousBarButtonItemImage: UIKit.UIImage?
  @objc final public var toolbarNextBarButtonItemImage: UIKit.UIImage?
  @objc final public var toolbarDoneBarButtonItemImage: UIKit.UIImage?
  @objc final public var toolbarPreviousBarButtonItemText: Swift.String?
  @objc final public var toolbarPreviousBarButtonItemAccessibilityLabel: Swift.String?
  @objc final public var toolbarNextBarButtonItemText: Swift.String?
  @objc final public var toolbarNextBarButtonItemAccessibilityLabel: Swift.String?
  @objc final public var toolbarDoneBarButtonItemText: Swift.String?
  @objc final public var toolbarDoneBarButtonItemAccessibilityLabel: Swift.String?
  @objc final public var shouldShowToolbarPlaceholder: Swift.Bool
  @objc final public var placeholderFont: UIKit.UIFont?
  @objc final public var placeholderColor: UIKit.UIColor?
  @objc final public var placeholderButtonColor: UIKit.UIColor?
  @objc final public var overrideKeyboardAppearance: Swift.Bool
  @objc final public var keyboardAppearance: UIKit.UIKeyboardAppearance
  @objc final public var shouldResignOnTouchOutside: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var resignFirstResponderGesture: UIKit.UITapGestureRecognizer {
    @objc get
    @objc set
  }
  @discardableResult
  @objc final public func resignFirstResponder() -> Swift.Bool
  @objc final public var shouldPlayInputClicks: Swift.Bool
  @objc final public var layoutIfNeededOnUpdate: Swift.Bool
  @objc final public var disabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc final public var enabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc final public var disabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc final public var enabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc final public var toolbarPreviousNextAllowedClasses: [UIKit.UIView.Type]
  @objc final public var disabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc final public var enabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc final public var touchResignedGestureIgnoreClasses: [UIKit.UIView.Type]
  @objc final public func registerTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @objc final public func unregisterTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @objc deinit
  @objc final public func reloadLayoutIfNeeded()
}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQKeyboardManager : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
@objc public enum ZLURLType : Swift.Int {
  case image
  case video
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias ZLImageLoaderBlock = (_ url: Foundation.URL, _ imageView: UIKit.UIImageView, _ progress: @escaping (CoreFoundation.CGFloat) -> Swift.Void, _ complete: @escaping () -> Swift.Void) -> Swift.Void
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ZLImagePreviewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var longPressBlock: ((VisionCCiOSSDK.ZLImagePreviewController?, UIKit.UIImage?, Swift.Int) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var doneBlock: (([Any]) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var videoHttpHeader: [Swift.String : Any]?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public init(datas: [Any], index: Swift.Int = 0, showSelectBtn: Swift.Bool = true, showBottomView: Swift.Bool = true, urlType: ((Foundation.URL) -> VisionCCiOSSDK.ZLURLType)? = nil, urlImageLoader: VisionCCiOSSDK.ZLImageLoaderBlock? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
}
extension VisionCCiOSSDK.ZLImagePreviewController {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
extension VisionCCiOSSDK.ZLImagePreviewController : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers public class ZLVideoManager : ObjectiveC.NSObject {
  @objc public class func mergeVideos(fileUrls: [Foundation.URL], completion: @escaping ((Foundation.URL?, (any Swift.Error)?) -> Swift.Void))
  @objc override dynamic public init()
  @objc deinit
}
extension VisionCCiOSSDK.ZLVideoManager {
  @objc dynamic public class func exportVideo(for asset: Photos.PHAsset, exportType: VisionCCiOSSDK.ZLVideoManager.ExportType = .mov, presetName: Swift.String = AVAssetExportPresetMediumQuality, complete: @escaping ((Foundation.URL?, (any Swift.Error)?) -> Swift.Void))
  @objc dynamic public class func exportVideo(for asset: AVFoundation.AVAsset, range: CoreMedia.CMTimeRange = CMTimeRange(start: .zero, duration: .positiveInfinity), exportType: VisionCCiOSSDK.ZLVideoManager.ExportType = .mov, presetName: Swift.String = AVAssetExportPresetMediumQuality, complete: @escaping ((Foundation.URL?, (any Swift.Error)?) -> Swift.Void))
}
extension VisionCCiOSSDK.ZLVideoManager {
  @objc public enum ExportType : Swift.Int {
    case mov
    case mp4
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ZLPhotoUIConfiguration : ObjectiveC.NSObject {
  @objc public enum CancelButtonStyle : Swift.Int {
    case text
    case image
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public class func `default`() -> VisionCCiOSSDK.ZLPhotoUIConfiguration
  @objc public class func resetConfiguration()
  @objc public var sortAscending: Swift.Bool
  @objc public var style: VisionCCiOSSDK.ZLPhotoBrowserStyle
  @objc public var statusBarStyle: UIKit.UIStatusBarStyle
  @objc public var navCancelButtonStyle: VisionCCiOSSDK.ZLPhotoUIConfiguration.CancelButtonStyle
  @objc public var showStatusBarInPreviewInterface: Swift.Bool
  @objc public var hudStyle: VisionCCiOSSDK.ZLProgressHUD.Style
  @objc public var adjustSliderType: VisionCCiOSSDK.ZLAdjustSliderType
  @objc public var cellCornerRadio: CoreFoundation.CGFloat
  public var customAlertClass: (any VisionCCiOSSDK.ZLCustomAlertProtocol.Type)?
  @objc public var columnCount: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var columnCountBlock: ((_ collectionViewWidth: CoreFoundation.CGFloat) -> Swift.Int)?
  @objc public var minimumInteritemSpacing: CoreFoundation.CGFloat
  @objc public var minimumLineSpacing: CoreFoundation.CGFloat
  @objc public var animateSelectBtnWhenSelectInThumbVC: Swift.Bool
  @objc public var animateSelectBtnWhenSelectInPreviewVC: Swift.Bool
  @objc public var selectBtnAnimationDuration: Swift.Double
  @objc public var showIndexOnSelectBtn: Swift.Bool
  @objc public var showScrollToBottomBtn: Swift.Bool
  @objc public var showCaptureImageOnTakePhotoBtn: Swift.Bool
  @objc public var showSelectedMask: Swift.Bool
  @objc public var showSelectedBorder: Swift.Bool
  @objc public var showInvalidMask: Swift.Bool
  @objc public var showSelectedPhotoPreview: Swift.Bool
  @objc public var showAddPhotoButton: Swift.Bool
  @objc public var showEnterSettingTips: Swift.Bool
  @objc public var timeout: Swift.Double
  @objc public var navViewBlurEffectOfAlbumList: UIKit.UIBlurEffect?
  @objc public var navViewBlurEffectOfPreview: UIKit.UIBlurEffect?
  @objc public var bottomViewBlurEffectOfAlbumList: UIKit.UIBlurEffect?
  @objc public var bottomViewBlurEffectOfPreview: UIKit.UIBlurEffect?
  @objc public var customImageNames: [Swift.String] {
    @objc get
    @objc set
  }
  public var customImageForKey: [Swift.String : UIKit.UIImage?] {
    get
    set
  }
  @objc public var customImageForKey_objc: [Swift.String : UIKit.UIImage] {
    @objc get
    @objc set
  }
  @objc public var languageType: VisionCCiOSSDK.ZLLanguageType {
    @objc get
    @objc set
  }
  public var customLanguageKeyValue: [VisionCCiOSSDK.ZLLocalLanguageKey : Swift.String] {
    get
    set
  }
  @objc public var customLanguageKeyValue_objc: [Swift.String : Swift.String] {
    @objc get
    @objc set
  }
  @objc public var themeFontName: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var themeColor: UIKit.UIColor
  @objc public var sheetTranslucentColor: UIKit.UIColor
  @objc public var sheetBtnBgColor: UIKit.UIColor
  @objc public var sheetBtnTitleColor: UIKit.UIColor
  @objc public var sheetBtnTitleTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var navBarColor: UIKit.UIColor
  @objc public var navBarColorOfPreviewVC: UIKit.UIColor
  @objc public var navTitleColor: UIKit.UIColor
  @objc public var navTitleColorOfPreviewVC: UIKit.UIColor
  @objc public var navEmbedTitleViewBgColor: UIKit.UIColor
  @objc public var albumListBgColor: UIKit.UIColor
  @objc public var embedAlbumListTranslucentColor: UIKit.UIColor
  @objc public var albumListTitleColor: UIKit.UIColor
  @objc public var albumListCountColor: UIKit.UIColor
  @objc public var separatorColor: UIKit.UIColor
  @objc public var thumbnailBgColor: UIKit.UIColor
  @objc public var previewVCBgColor: UIKit.UIColor
  @objc public var bottomToolViewBgColor: UIKit.UIColor
  @objc public var bottomToolViewBgColorOfPreviewVC: UIKit.UIColor
  @objc public var originalSizeLabelTextColor: UIKit.UIColor
  @objc public var originalSizeLabelTextColorOfPreviewVC: UIKit.UIColor
  @objc public var bottomToolViewBtnNormalTitleColor: UIKit.UIColor
  @objc public var bottomToolViewDoneBtnNormalTitleColor: UIKit.UIColor
  @objc public var bottomToolViewBtnNormalTitleColorOfPreviewVC: UIKit.UIColor
  @objc public var bottomToolViewDoneBtnNormalTitleColorOfPreviewVC: UIKit.UIColor
  @objc public var bottomToolViewBtnDisableTitleColor: UIKit.UIColor
  @objc public var bottomToolViewDoneBtnDisableTitleColor: UIKit.UIColor
  @objc public var bottomToolViewBtnDisableTitleColorOfPreviewVC: UIKit.UIColor
  @objc public var bottomToolViewDoneBtnDisableTitleColorOfPreviewVC: UIKit.UIColor
  @objc public var bottomToolViewBtnNormalBgColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var bottomToolViewBtnNormalBgColorOfPreviewVC: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var bottomToolViewBtnDisableBgColor: UIKit.UIColor
  @objc public var bottomToolViewBtnDisableBgColorOfPreviewVC: UIKit.UIColor
  @objc public var limitedAuthorityTipsColor: UIKit.UIColor
  @objc public var cameraRecodeProgressColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var selectedMaskColor: UIKit.UIColor
  @objc public var selectedBorderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var invalidMaskColor: UIKit.UIColor
  @objc public var indexLabelTextColor: UIKit.UIColor
  @objc public var indexLabelBgColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var cameraCellBgColor: UIKit.UIColor
  @objc public var adjustSliderNormalColor: UIKit.UIColor
  @objc public var adjustSliderTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var imageEditorToolTitleNormalColor: UIKit.UIColor
  @objc public var imageEditorToolTitleTintColor: UIKit.UIColor
  @objc public var imageEditorToolIconTintColor: UIKit.UIColor?
  @objc public var trashCanBackgroundNormalColor: UIKit.UIColor
  @objc public var trashCanBackgroundTintColor: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum ZLPhotoBrowserStyle : Swift.Int {
  case embedAlbumList
  case externalAlbumList
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ZLAdjustSliderType : Swift.Int {
  case vertical
  case horizontal
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension VisionCCiOSSDK.ZLPhotoModel {
  public enum MediaType : Swift.Int {
    case unknown
    case image
    case gif
    case livePhoto
    case video
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc public class ZLPhotoModel : ObjectiveC.NSObject {
  final public let ident: Swift.String
  final public let asset: Photos.PHAsset
  public var type: VisionCCiOSSDK.ZLPhotoModel.MediaType
  public var duration: Swift.String
  public var isSelected: Swift.Bool
  public var dataSize: VisionCCiOSSDK.ZLPhotoConfiguration.KBUnit? {
    get
  }
  public var editImage: UIKit.UIImage? {
    get
    set
  }
  public var second: VisionCCiOSSDK.ZLPhotoConfiguration.Second {
    get
  }
  public var whRatio: CoreFoundation.CGFloat {
    get
  }
  public var previewSize: CoreFoundation.CGSize {
    get
  }
  public var editImageModel: VisionCCiOSSDK.ZLEditImageModel?
  public init(asset: Photos.PHAsset)
  public func transformAssetType(for asset: Photos.PHAsset) -> VisionCCiOSSDK.ZLPhotoModel.MediaType
  public func transformDuration(for asset: Photos.PHAsset) -> Swift.String
  @objc deinit
}
extension VisionCCiOSSDK.ZLPhotoModel {
  public static func == (lhs: VisionCCiOSSDK.ZLPhotoModel, rhs: VisionCCiOSSDK.ZLPhotoModel) -> Swift.Bool
}
extension Swift.FloatingPoint {
  public var toRadians: Self {
    get
  }
  public var toDegrees: Self {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class JRefreshAutoFooter : VisionCCiOSSDK.JRefreshFooter {
  @_Concurrency.MainActor(unsafe) public var automaticallyRefresh: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var triggerAutomaticallyRefreshPercent: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var onlyRefreshPerDrag: Swift.Bool
  @_Concurrency.MainActor(unsafe) override open var state: VisionCCiOSSDK.JRefreshState {
    get
    set(newState)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHidden: Swift.Bool {
    @objc get
    @objc set(newHidden)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension VisionCCiOSSDK.JRefreshAutoFooter {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepare()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func scrollViewContentSizeDidChange(_ change: [Foundation.NSKeyValueChangeKey : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func scrollViewContentOffsetDidChange(_ change: [Foundation.NSKeyValueChangeKey : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func scrollViewPanStateDidChange(_ change: [Foundation.NSKeyValueChangeKey : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func beginRefreshing()
}
extension VisionCCiOSSDK.ZLPhotoBrowserWrapper where Base : UIKit.UIImage {
  public static func animateGifImage(data: Foundation.Data) -> UIKit.UIImage?
  public static func getFrameDuration(from imageSource: ImageIO.CGImageSource, at index: Swift.Int) -> Foundation.TimeInterval
  public static func getFrameDuration(from gifInfo: [Swift.String : Any]?) -> Foundation.TimeInterval
}
extension VisionCCiOSSDK.ZLPhotoBrowserWrapper where Base : UIKit.UIImage {
  public func fixOrientation() -> UIKit.UIImage
  public func rotate(orientation: UIKit.UIImage.Orientation) -> UIKit.UIImage
  public func swapRectWidthAndHeight(_ rect: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  public func rotate(degress: CoreFoundation.CGFloat) -> UIKit.UIImage
  public func mosaicImage() -> UIKit.UIImage?
  public func resize(_ size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage?
  public func resize_vI(_ size: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat? = nil) -> UIKit.UIImage?
  public func toCIImage() -> CoreImage.CIImage?
  public func clipImage(angle: CoreFoundation.CGFloat, editRect: CoreFoundation.CGRect, isCircle: Swift.Bool) -> UIKit.UIImage
  public func blurImage(level: CoreFoundation.CGFloat) -> UIKit.UIImage?
  public func hasAlphaChannel() -> Swift.Bool
}
extension VisionCCiOSSDK.ZLPhotoBrowserWrapper where Base : UIKit.UIImage {
  public func adjust(brightness: Swift.Float, contrast: Swift.Float, saturation: Swift.Float) -> UIKit.UIImage?
}
extension VisionCCiOSSDK.ZLPhotoBrowserWrapper where Base : UIKit.UIImage {
  public static func image(withColor color: UIKit.UIColor, size: CoreFoundation.CGSize = CGSize(width: 1, height: 1)) -> UIKit.UIImage?
  public func fillColor(_ color: UIKit.UIColor) -> UIKit.UIImage
}
extension VisionCCiOSSDK.ZLPhotoBrowserWrapper where Base : UIKit.UIImage {
  public var width: CoreFoundation.CGFloat {
    get
  }
  public var height: CoreFoundation.CGFloat {
    get
  }
}
extension VisionCCiOSSDK.ZLPhotoBrowserWrapper where Base : CoreImage.CIImage {
  public func toUIImage() -> UIKit.UIImage?
}
extension VisionCCiOSSDK.ZLPhotoBrowserWrapper where Base : Photos.PHAsset {
  public var isInCloud: Swift.Bool {
    get
  }
  public var isGif: Swift.Bool {
    get
  }
  public var filename: Swift.String? {
    get
  }
  public var resource: Photos.PHAssetResource? {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) convenience public init(pathString: Swift.String)
  @_Concurrency.MainActor(unsafe) convenience public init(SVGNamed: Swift.String, parser: (any VisionCCiOSSDK.SVGParser)? = nil, completion: ((VisionCCiOSSDK.SVGLayer) -> ())? = nil)
  @_Concurrency.MainActor(unsafe) convenience public init(SVGURL: Foundation.URL, parser: (any VisionCCiOSSDK.SVGParser)? = nil, completion: ((VisionCCiOSSDK.SVGLayer) -> ())? = nil)
  @_Concurrency.MainActor(unsafe) convenience public init(SVGData svgData: Foundation.Data, parser: (any VisionCCiOSSDK.SVGParser)? = nil, completion: ((VisionCCiOSSDK.SVGLayer) -> ())? = nil)
}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQKeyboardManager {
  @objc final public var movedDistance: CoreFoundation.CGFloat {
    @objc get
  }
  @objc final public var movedDistanceChanged: ((CoreFoundation.CGFloat) -> Swift.Void)? {
    @objc get
    @objc set(newValue)
  }
}
extension VisionCCiOSSDK.JRefreshState : Swift.Equatable {}
extension VisionCCiOSSDK.JRefreshState : Swift.Hashable {}
extension VisionCCiOSSDK.JRefreshState : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLCustomAlertStyle : Swift.Equatable {}
extension VisionCCiOSSDK.ZLCustomAlertStyle : Swift.Hashable {}
extension VisionCCiOSSDK.ZLCustomAlertAction.Style : Swift.Equatable {}
extension VisionCCiOSSDK.ZLCustomAlertAction.Style : Swift.Hashable {}
extension VisionCCiOSSDK.ZLEditImageConfiguration.EditTool : Swift.Equatable {}
extension VisionCCiOSSDK.ZLEditImageConfiguration.EditTool : Swift.Hashable {}
extension VisionCCiOSSDK.ZLEditImageConfiguration.EditTool : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLEditImageConfiguration.AdjustTool : Swift.Equatable {}
extension VisionCCiOSSDK.ZLEditImageConfiguration.AdjustTool : Swift.Hashable {}
extension VisionCCiOSSDK.ZLEditImageConfiguration.AdjustTool : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLLanguageType : Swift.Equatable {}
extension VisionCCiOSSDK.ZLLanguageType : Swift.Hashable {}
extension VisionCCiOSSDK.ZLLanguageType : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLNoAuthorityType : Swift.Equatable {}
extension VisionCCiOSSDK.ZLNoAuthorityType : Swift.Hashable {}
extension VisionCCiOSSDK.ZLNoAuthorityType : Swift.RawRepresentable {}
extension VisionCCiOSSDK.SessionStatus : Swift.Equatable {}
extension VisionCCiOSSDK.SessionStatus : Swift.Hashable {}
extension VisionCCiOSSDK.SessionStatus : Swift.RawRepresentable {}
extension VisionCCiOSSDK.SessionType : Swift.Equatable {}
extension VisionCCiOSSDK.SessionType : Swift.Hashable {}
extension VisionCCiOSSDK.SessionType : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.CaptureSessionPreset : Swift.Equatable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.CaptureSessionPreset : Swift.Hashable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.CaptureSessionPreset : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.FocusMode : Swift.Equatable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.FocusMode : Swift.Hashable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.FocusMode : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.ExposureMode : Swift.Equatable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.ExposureMode : Swift.Hashable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.ExposureMode : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.VideoExportType : Swift.Equatable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.VideoExportType : Swift.Hashable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.VideoExportType : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.DevicePosition : Swift.Equatable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.DevicePosition : Swift.Hashable {}
extension VisionCCiOSSDK.ZLCameraConfiguration.DevicePosition : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLInputTextStyle : Swift.Equatable {}
extension VisionCCiOSSDK.ZLInputTextStyle : Swift.Hashable {}
extension VisionCCiOSSDK.ZLProgressHUD.Style : Swift.Equatable {}
extension VisionCCiOSSDK.ZLProgressHUD.Style : Swift.Hashable {}
extension VisionCCiOSSDK.ZLProgressHUD.Style : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLFilterType : Swift.Equatable {}
extension VisionCCiOSSDK.ZLFilterType : Swift.Hashable {}
extension VisionCCiOSSDK.ZLFilterType : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQAutoToolbarManageBehaviour : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQAutoToolbarManageBehaviour : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQAutoToolbarManageBehaviour : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQPreviousNextDisplayMode : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQPreviousNextDisplayMode : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQPreviousNextDisplayMode : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQEnableMode : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQEnableMode : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension VisionCCiOSSDK.IQEnableMode : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLURLType : Swift.Equatable {}
extension VisionCCiOSSDK.ZLURLType : Swift.Hashable {}
extension VisionCCiOSSDK.ZLURLType : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLVideoManager.ExportType : Swift.Equatable {}
extension VisionCCiOSSDK.ZLVideoManager.ExportType : Swift.Hashable {}
extension VisionCCiOSSDK.ZLVideoManager.ExportType : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLPhotoUIConfiguration.CancelButtonStyle : Swift.Equatable {}
extension VisionCCiOSSDK.ZLPhotoUIConfiguration.CancelButtonStyle : Swift.Hashable {}
extension VisionCCiOSSDK.ZLPhotoUIConfiguration.CancelButtonStyle : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLPhotoBrowserStyle : Swift.Equatable {}
extension VisionCCiOSSDK.ZLPhotoBrowserStyle : Swift.Hashable {}
extension VisionCCiOSSDK.ZLPhotoBrowserStyle : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLAdjustSliderType : Swift.Equatable {}
extension VisionCCiOSSDK.ZLAdjustSliderType : Swift.Hashable {}
extension VisionCCiOSSDK.ZLAdjustSliderType : Swift.RawRepresentable {}
extension VisionCCiOSSDK.ZLPhotoModel.MediaType : Swift.Equatable {}
extension VisionCCiOSSDK.ZLPhotoModel.MediaType : Swift.Hashable {}
extension VisionCCiOSSDK.ZLPhotoModel.MediaType : Swift.RawRepresentable {}
